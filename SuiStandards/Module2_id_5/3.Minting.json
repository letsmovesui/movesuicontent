{
  "codeSol": "module 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::{Self, TxContext};\n    use std::string::String;\n    use std::vector;\n    use sui::event;\n    \n    struct SuiFren has key {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n\n    struct CANDY has drop {}\n\n    fun init(otw: CANDY, ctx: &mut TxContext) {\n        let (treasury, metadata) = coin::create_currency(\n            otw,\n            9,\n            b\"CANDY\",\n            b\"SuiFren Candy\",\n            b\"Candies to level up SuiFren\"\n            option::none(),\n            ctx,\n        );\n        transfer::public_transfer(metadata, tx_context::sender(ctx));\n        transfer::public_transfer(treasury_cap, tx_context::sender(ctx));\n    }\n\n    entry fun mint(treasury_cap: &mut TreasuryCap<CANDY>, amount: u64, ctx: &mut TxContext) {\n        coin::mint_and_transfer(treasury_cap, 1000, tx_context::sender(ctx), ctx);\n    }\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "3",
  "codeDef": "module 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::TxContext;\n    use std::string::String;\n    use std::vector;\n    use sui::event;\n    \n    struct SuiFren has key {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n\n    struct CANDY has drop {}\n\n    fun init(otw: CANDY, ctx: &mut TxContext) {\n        let (treasury, metadata) = coin::create_currency(\n            otw,\n            9,\n            b\"CANDY\",\n            b\"SuiFren Candy\",\n            b\"Candies to level up SuiFren\"\n            option::none(),\n            ctx,\n        );\n        transfer::public_transfer(metadata, tx_context::sender(ctx));\n        transfer::public_transfer(treasury_cap, tx_context::sender(ctx));\n    }\n\n    // Add the mint function here\n}",
  "title": "Minting SuiFren Candies with the TreasuryCap object",
  "quizTitle": "Add a `mint_candy` entry function to the `sui_fren` module that mints Candy coins to the sender. For now only the `TreasuryCap<Candy>` owner can call it. The mint function should takes the treasury cap object, an amount of type `u64` and any other system object arguments as needed.",
  "content": [
    "In the previous lesson, we created our first `Coin` and temporarily transfer to the `TreasuryCap` object to the sender (deployer of the module). With this `TreasuryCap`, this account can now mint `MYCOIN` coins:\n",
    "```\n",
    "use std::string;\n",
    "use sui::url;\n",
    "\n",
    "fun init(otw: MYCOIN, ctx: &mut TxContext) {\n",
    "    let (treasury_cap, metadata) = coin::create_currency(\n",
    "        otw,\n",
    "        9,\n",
    "        b\"MYC\",\n",
    "        b\"MyCoin\",\n",
    "        b\"My Coin description\",\n",
    "        option::some(url::new_unsafe(string::utf8(bb\"https://mycoin.com/logo.png\"))),\n",
    "        ctx,\n",
    "    );\n",
    "    transfer::public_freeze_object(metadata);\n",
    "    transfer::public_transfer(treasury_cap, tx_context::sender(ctx));\n",
    "}\n",
    "\n",
    "entry fun mint(treasury_cap: &mut TreasuryCap<MYCOIN>, ctx: &mut TxContext) {\n",
    "    let coins = coin::mint(treasury_cap, 1000, ctx);\n",
    "    // Do something with the coins\n",
    "}\n",
    "```\n",
    "There are four important things to call out:\n",
    "1. `coin::mint` creates a new Coin (wallet) object. This means that existing balances in other wallets of the user will not change.\n",
    "2. If you recall, owned objects are verified when passed in as arguments to transaction and only their owners can do so. In this case, only the account that owns `TreasuryCap<MYCOIN>` can call mint.\n",
    "3. `TreasuryCap` has a type argument too (`MYCOIN`). This specifies which coin type the treasury cap manages.\n",
    "4. `coin::mint` doesn't need to specify MyCoin as the type argument as the compiler can infer that from the `treasury_cap` (of type `TreasuryCap<MYCOIN>`).\n",
    "\n",
    "Also note that the type of the `TreasuryCap` is a fully qualified type name - `0x123::my_coin::MYCOIN` if our module's address is `0x123` in the example. This means if someone else creates a `MYCOIN` struct in their module, that would be treated as a completely different coin even if the struct name is the same. Beside `coin::mint`, developers can also use `coin::mint_and_transfer` to directly mint to a specific account.\n",
    "\n",
    "Another common pattern is to mint the initial allocation of coins in the `init` function:\n",
    "```\n",
    "use std::string;\n",
    "use sui::url;\n",
    "\n",
    "fun init(otw: MYCOIN, ctx: &mut TxContext) {\n",
    "    let (treasury_cap, metadata) = coin::create_currency(\n",
    "        otw,\n",
    "        9,\n",
    "        b\"MYC\",\n",
    "        b\"MyCoin\",\n",
    "        b\"My Coin description\",                       option::some(url::new_unsafe(string::utf8(bb\"https://mycoin.com/logo.png\"))),\n",
    "        ctx,\n",
    "    );\n",
    "    coin::mint_and_transfer(treasury_cap, 1000000, tx_context::sender(ctx), ctx);\n",
    "    \n",
    "    transfer::public_freeze_object(metadata);\n",
    "    transfer::public_transfer(treasury_cap, tx_context::sender(ctx));\n",
    "}\n",
    "```\n",
    "This allows developers to create an initial amount of coins for circulation. They can optionally implement a mint function to create more coins later."
  ]
}
