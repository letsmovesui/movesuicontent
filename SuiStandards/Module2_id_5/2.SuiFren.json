{
  "codeSol": "module 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::TxContext;\n    use std::string::String;\n    use std::vector;\n    use sui::event;\n    \n    struct SuiFren has key {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n\n    struct CANDY has drop {}\n\n    fun init(otw: CANDY, ctx: &mut TxContext) {\n        let (treasury, metadata) = coin::create_currency(\n            otw,\n            9,\n            b\"CANDY\",\n            b\"SuiFren Candy\",\n            b\"Candies to level up SuiFren\"\n            option::none(),\n            ctx,\n        );\n        transfer::public_transfer(metadata, tx_context::sender(ctx));\n        transfer::public_transfer(treasury_cap, tx_context::sender(ctx));\n    }\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "2",
  "codeDef": "module 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::tx_context::TxContext;\n    use std::string::String;\n    \n    struct SuiFren has key {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n\n    // Add the new struct here\n\n    // Update\n    fun init(ctx: &mut TxContext) {\n    }\n}",
  "title": "SuiFren Candy - Creating a new Coin type",
  "quizTitle": "Let's make SuiFrens more fun and introduce a Candies as a coin that can be fed to SuiFrens to increase their fighting power.\n1. Add a new Candy coin type to the `sui_fren` module\n2. Update the init to create the new Candy Coin. For now, let's send both the metadata and TreasuryCap objects to the sender\nThe Candy coin's metadata is as follows:\n* \"CANDY\" as the symbol\n* SuiFren Candy\" as the name\n* \"Candies to level up SuiFren\" as the description\n* No logo (option::none())",
  "content": [
    "In Sui Move, there's only a single module (smart contract) that developers need to call from their call to create and manage their coins. In order to differentiate between different types of coins that different developers create, Coin uses generics (type arguments):\n",
    "\n",
    "```\n",
    "/// Get immutable reference to the balance of a coin.\n",
    "public fun balance<T>(coin: &Coin<T>): &Balance<T> {\n",
    "    &coin.balance\n",
    "}\n",
    "```\n",
    "The above function is used to check the balance of a user's owned Coin wallet object. Note that there's a ```<T>``` at the end of the function name. This is a type argument that specifies which coin wallet the function is being called for, which can be ```Coin<MYCOIN>``` or ```Coin<YourCoin>```.\n",
    "\n",
    " In order to create a coin, developers first need to define this Coin type as a struct in their module:\n",
    "```\n",
    "module my_coin::my_coin {\n",
    "    struct MYCOIN has drop {}\n",
    "}\n",
    "```\n",
    "This is similar to [how the SUI coin is also defined](https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/packages/sui-framework/sources/sui.move).\n",
    "\n",
    "The developers can then create the new coin by calling `coin::create_currency`, usually as part of the init function because you need a one-time witness (otw) object of the Coin type (MYCOIN in this case):\n",
    "```\n",
    "use std::string;\n",
    "use sui::url;\n",
    "\n",
    "fun init(otw: MYCOIN, ctx: &mut TxContext) {\n",
    "    let (treasury_cap, metadata) = coin::create_currency(\n",
    "        otw,\n",
    "        9,\n",
    "        b\"MYC\",\n",
    "        b\"MyCoin\",\n",
    "        b\"My Coin description\",                       option::some(url::new_unsafe(string::utf8(bb\"https://mycoin.com/logo.png\"))),\n",
    "        ctx,\n",
    "    );\n",
    "    transfer::public_freeze_object(metadata);\n",
    "    transfer::public_transfer(treasury_cap, tx_context::sender(ctx));\n",
    "}\n",
    "```\n",
    "`coin::create_currency` returns a metadata object that stores information about the coin: Symbol (what the Coin will be displayed shortly as), name, description and logo URL. This allows off-chain components such as Web UI to look this information up and display them. The developers can choose to freeze the metadata object, which no longer allows the name/symbol/etc. to change or keep it owned and transfer to an account for later management (More on this in a later lesson).\n",
    "\n",
    "`coin::create_currency` also returns the TreasuryCap object that can be used to manage the coins. We'll talk more about this in a later lesson.\n",
    "\n",
    "With the Coin now created, developers can use ```NYCOIN``` as the Coin type argument when calling coin functions, for example:\n",
    " \n",
    "```\n",
    "public fun my_coin_balance(coin: &Coin<MYCOIN>): &Balance<MYCOIN> {\n",
    "    // <MYCOIN> is technically not required here as the type can be inferred.\n",
    "    // It's just included explicitly for demonstration purposes.\n",
    "    coin::balance<MYCOIN>(coin)\n",
    "}"
  ]
}
