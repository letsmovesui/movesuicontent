{
  "codeSol": "module 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::{Self, TxContext};\n    use std::string::String;\n    use std::vector;\n    use sui::event;\n    \n    struct SuiFren has key {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n\n    struct CANDY has drop {}\n\n    struct CandyTreasuryCapHolder has key {\n        id: UID,\n        treasury_cap: TreasuryCap<CANDY>,\n    }\n\n    entry fun mint(treasury_cap_holder: &mut CandyTreasuryCapHolder<CANDY>, amount: u64, ctx: &mut TxContext) {\n        let treasury_cap = &mut treasury_cap_holder.treasury_cap;\n        coin::mint_and_transfer(treasury_cap, 1000, tx_context::sender(ctx), ctx);\n    }\n\n    entry fun transfer_half_candies(from: &mut Coin<CANDY>, to: &mut Coin<CANDY>, ctx: &mut TxContext) {\n        let half_coins = coin::take(coin::balance_mut(from), coin::balance(from) / 2, ctx);\n        coin::put(coin::balance_mut(to), half_coins);\n    }\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "5",
  "codeDef": "module 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::{Self, TxContext};\n    use std::string::String;\n    use std::vector;\n    use sui::event;\n    \n    struct SuiFren has key {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n\n    struct CANDY has drop {}\n\n    struct CandyTreasuryCapHolder has key {\n        id: UID,\n        treasury_cap: TreasuryCap<CANDY>,\n    }\n\n    entry fun mint(treasury_cap_holder: &mut CandyTreasuryCapHolder<Candy>, amount: u64, ctx: &mut TxContext) {\n        let treasury_cap = &mut treasury_cap_holder.treasury_cap;\n        coin::mint_and_transfer(treasury_cap, 1000, tx_context::sender(ctx), ctx);\n    }\n\n    // Add the new function here\n}",
  "title": "Coin vs Balance - take, put, transfer, zero, destroy_zero",
  "quizTitle": "Add a `transfer_half_candies` entry function that transfers half of the candies in a `Coin` object (named from) to another `Coin` object (named to)",
  "content": [
    "One of the common confusions new developers often have about `Coin` in Sui is that there's a `Balance` object that looks similar:\n",
    "```\n",
    "struct Coin<phantom T> has key, store {\n",
    "    id: UID,\n",
    "    balance: Balance<T>\n",
    "}\n",
    "\n",
    "/// Storable balance - an inner struct of a Coin type.\n",
    "/// Can be used to store coins which don't need the key ability.\n",
    "struct Balance<phantom T> has store {\n",
    "    value: u64\n",
    "}\n",
    "```\n",
    "What exactly is the difference between `Coin` and `Balance` and when should we use either? The best comparison here is:\n",
    "1. `Coin` object is more like a wallet. The `Coin` wallet has an inner balance and cash (`Balance`) can be taken out of it and deposited into another `Coin` wallet object.\n",
    "2. `Balance` is like cash only. It cannot be stored alone and needs to be put into wallets or pockets. Developers can choose to create their own \"pocket\" objects to store Balance\n",
    "\n",
    "Technically, since the `Coin` object  also has the store ability, developers can put the entire `Coin` wallet into their own custom objects as well. However, it is quite strange to do so and `Balance` should be used in that case as `Coin` is already like a container. Furthermore, putting (wrapping Coin wallet objects) into another object effectively removes it from object global storage like we discussed in the `Object` courses. This is generally not desired as it can make wallets \"disappear\".\n",
    "\n",
    "```\n",
    "entry fun transfer_coins(from_wallet: &mut Coin<MYCOIN>, amount: u64, to_wallet: &mut Coin<MYCOIN>, ctx: &mut TxContext) {\n",
    "    let cash = coin::take(coin::balance_mut(from_wallet), amount, ctx);\n",
    "    coin::put(coin::balance_mut(to_wallet), cash);\n",
    "}\n",
    "```\n",
    "In the example above, we take some coins from the `from_wallet` Coin object and deposit it into the `to_wallet` Coin object. Note that only the owner of both `from_wallet` and `to_wallet` can call `transfer_coins`. We need to use `coin::balance_mut` to get to the inner balance of a `Coin` object as a struct fields are not visible outside of the defining module (coin in this case).\n",
    "\n",
    "The `Coin` module in Sui doesn't offer direct transfer from one `Coin` object to another. Developers would need to manually use take + put to accomplish a transfer.\n",
    "\n",
    "Some other functions of notes in the coin module are:\n",
    "1. `balance(&Coin)`: returns the balance of a `Coin` object.\n",
    "2. `zero()` which creates a Coin object with zero balance (empty wallet)\n",
    "3. `destroy_zero()` - destroys an empty wallet. A wallet with non-zero balance cannot be destroyed and you'd need to move the coins there somewhere else first."
  ]
}
