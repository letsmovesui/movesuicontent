{
  "codeSol": "",
  "quizType": "ANSWERS",
  "answers": [
    {
      "answer": "A. Coin can be a standalone object but Balance cannot",
      "isCorrect": true
    },
    {
      "answer": "B. Coin doesn't have the store ability while Balance does",
      "isCorrect": false
    },
    {
      "answer": "C. Balance has the key ability while Coin doesn't",
      "isCorrect": false
    }
  ],
  "lessonId": "6",
  "codeDef": "",
  "title": "More Balance functions",
  "quizTitle": "What's the technical difference between `Coin` and `Balance`?",
  "content": [
    "The `sui::balance` module where `Balance` object is defined also offers a few functions of note:\n",
    "\n",
    "value returns the number of coins in a `Balance` object:\n",
    "```\n",
    "/// Get the amount stored in a `Balance`.\n",
    "public fun value<T>(self: &Balance<T>): u64 {\n",
    "    self.value\n",
    "}\n",
    "```\n",
    "\n",
    "join takes a mutable balance and another balance and added the second balance to the first:\n",
    "```\n",
    "/// Join two balances together.\n",
    "public fun join<T>(self: &mut Balance<T>, balance: Balance<T>): u64 {\n",
    "    let Balance { value } = balance;\n",
    "    self.value = self.value + value;\n",
    "    self.value\n",
    "}\n",
    "```\n",
    "\n",
    "`split` extracts an amount of coins from a mutable balance and creates a second balance:\n",
    "```\n",
    "/// Split a `Balance` and take a sub balance from it.\n",
    "public fun split<T>(self: &mut Balance<T>, value: u64): Balance<T> {\n",
    "    assert!(self.value >= value, ENotEnough);\n",
    "    self.value = self.value - value;\n",
    "    Balance { value }\n",
    "}\n",
    "```\n",
    "\n",
    "`withdraw_all` is similar to split but extracts all of the coins from the mutable balance, leaving it empty:\n",
    "```\n",
    "/// Withdraw all balance. After this the remaining balance must be 0.\n",
    "public fun withdraw_all<T>(self: &mut Balance<T>): Balance<T> {\n",
    "    let value = self.value;\n",
    "    split(self, value)\n",
    "}\n",
    "```\n",
    "\n",
    "With these different functions, developers can create more complex operations on balances after they're taken from a user's owned `Coin` object. Balances can be split and joint to divide an amount of coins into smaller portions and send them to different wallets. This is commonly seen when processing fees for example:\n",
    "\n",
    "```\n",
    "/// Withdraw all balance. After this the remaining balance must be 0.\n",
    "public fun trade(wallet: &mut Coin<Sui>, amount: u64) {\n",
    "    let coins_to_trade = balance::split(coin::balance_mut(wallet), amount);\n",
    "    // 1% fee.\n",
    "    let fees = balance::split(&mut coins_to_trade, amount / 100);\n",
    "    // Deposit the fee somewhere and continue with the trade.\n",
    "}\n",
    "```"
  ]
}
