{
  "codeSol": "module 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::{Self, TxContext};\n    use std::string::String;\n    use std::vector;\n    use sui::event;\n    \n    struct SuiFren has key {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n        power: u64\n    }\n\n    struct CANDY has drop {}\n\n    struct CandyTreasuryCapHolder has key {\n        id: UID,\n        treasury_cap: TreasuryCap<CANDY>,\n    }\n\n    entry fun mint(treasury_cap_holder: &mut CandyTreasuryCapHolder<CANDY>, amount: u64, ctx: &mut TxContext) {\n        let treasury_cap = &mut treasury_cap_holder.treasury_cap;\n        coin::mint_and_transfer(treasury_cap, 1000, tx_context::sender(ctx), ctx);\n    }\n\n    entry fun feed_candies(treasury_cap_holder: &mut CandyTreasuryCapHolder<CANDY>, sui_fren: &mut SuiFren, candies: Coin<CANDY>) {\n        let amount = coin::value(&coins);\n        sui_fren.power = sui_fren.power + amount;\n        let treasury_cap = &mut treasury_cap_holder.treasury_cap;\n        coin::burn(treasury_cap, coins);\n    }\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "7",
  "codeDef": "module 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::{Self, TxContext};\n    use std::string::String;\n    use std::vector;\n    use sui::event;\n    \n    struct SuiFren has key {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n        power: u64\n    }\n\n    struct CANDY has drop {}\n\n    struct CandyTreasuryCapHolder has key {\n        id: UID,\n        treasury_cap: TreasuryCap<CANDY>,\n    }\n\n    entry fun mint(treasury_cap_holder: &mut CandyTreasuryCapHolder<CANDY>, amount: u64, ctx: &mut TxContext) {\n        let treasury_cap = &mut treasury_cap_holder.treasury_cap;\n        coin::mint_and_transfer(treasury_cap, 1000, tx_context::sender(ctx), ctx);\n    }\n\n    // Add the new function here\n}",
  "title": "Burning Coins",
  "quizTitle": "Add a feed_candies function that take a `SuiFren`, a `Coin<CANDY>`, add the amount to the `SuiFren`'s power, and burn the candies.",
  "content": [
    "In the previous lessons, we have discussed how `Coins` can be minted with the `TreasuryCap`.\n",
    "```\n",
    "use std::string;\n",
    "use sui::url;\n",
    "\n",
    "struct MYCOIN has drop {}\n",
    "\n",
    "struct TreasuryCapHolder has key {\n",
    "    id: UID,\n",
    "    treasury_cap: TreasuryCap<MYCOIN>,\n",
    "}\n",
    "\n",
    "entry fun mint(treasury_cap_holder: &mut TreasuryCapHolder, ctx: &mut TxContext) {\n",
    "    let treasury_cap = &mut TreasuryCapHolder.treasury_cap;\n",
    "    let coins = coin::mint(treasury_cap, 1000, ctx);\n",
    "    // Do something with the coins\n",
    "}\n",
    "```\n",
    "We can burn using `TreasuryCap` as well:\n",
    "```\n",
    "entry fun burn(treasury_cap_holder: &mut TreasuryCapHolder, coins: Coin<MYCOIN>) {\n",
    "    let treasury_cap = &mut TreasuryCapHolder.treasury_cap;\n",
    "    coin::burn(treasury_cap, coins);\n",
    "}\n",
    "```\n",
    "\n",
    "`coin::burn` will burn all coins in the given `Coin` object and also destroys the `Coin` object itself. This is equivalent to burning the entire wallet. If developers instead just want to burn a specific amount from a Coin object, they need to extract that amount out first and just burn those specific coins:\n",
    "```\n",
    "entry fun burn(treasury_cap_holder: &mut TreasuryCapHolder, coins: &mut Coin<MYCOIN>, amount: u64, ctx: &mut TxContext) {\n",
    "    let coins_to_burn = coin::take(coin::balance_mut(coins), amount);\n",
    "    let treasury_cap = &mut TreasuryCapHolder.treasury_cap;\n",
    "    coin::burn(treasury_cap, coins_to_burn);\n",
    "}\n",
    "```"
  ]
}
