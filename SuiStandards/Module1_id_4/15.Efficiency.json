{
  "codeSol": "",
  "quizType": "ANSWERS",
  "answers": [
    {
      "answer": "A. Checking if a large vector contains an item can be slow due to linear scan",
      "isCorrect": true
    },
    {
      "answer": "B. Adding to a large vector is slow",
      "isCorrect": false
    },
    {
      "answer": "C. Vectors are bad and should be avoided in all situations",
      "isCorrect": false
    }
  ],
  "lessonId": "15",
  "codeDef": "",
  "title": "Efficiency of NFT mints and Effect on Sui network",
  "quizTitle": "Why does using a large vector affect the efficiency of the Sui network?",
  "content": [
    "With the object model, specifically owned objects, the Sui network is built to handle hundreds of thousands of TPS as transactions that only modify specific owned objects can be executed in parallel without conflicting with one another:\n",
    "1. Alice adds an armor to her hero NFT. She owns both the armor and the hero NFTs.\n",
    "2. Bob sends some SUI as a gift to Alice, which modifies both of their primary Coin objects.\n",
    "\n",
    "The two transactions above don't touch the same objects and can be run in parallel, significantly reducing the execution time. Furthermore, transactions involving owned objects don't need to go through the full consensus process that are usually heavy and slow for most networks.\n",
    "\n",
    "The general rule of thumb for building scalable applications that can perform well on the Sui network and also reduce contention - if too many applications are built incorrectly, they can take up more execution time and resources on the Sui network and thus potentially lead to a lower scale than the Sui network is designed to achieve.\n",
    "\n",
    "There's a few mistakes that developers should avoid as much as possible:\n",
    "1. Use modifiable shared objects when there are no reasons to. This can manifest during an NFT mint for example, where the Collection object has a supply field that's increased every time a new NFT is minted. This supply can also be used to generate an incrementing id for each NFT (e.g. SuiFren #124). This should be avoided if possible.\n",
    "2. Use a vector to keep track of which addresses have minted an NFT. This is common with allowlist features where only specific accounts that have been allowlisted can mint an NFT. The minting module then keeps track of who has minted so an account can only mint one NFT at maximum. Allowlist can be implemented incorrectly if developers use a vector or vec_set/vec_map (both use vectors underneath). If the allowlist is large enough (e.g. > 10k items), checking whether an address has minted before can be very expensive for the network as it'd take a long time to execute. In these cases, it'd be better to use a table instead.\n",
    "3. Freeze objects as much as possible instead of sharing if they are never changed."
  ]
}
