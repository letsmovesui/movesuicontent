{
  "codeSol": "module 0x123::sui_fren {\n    use sui::object::{Self, UID, ID};\n    use sui::tx_context::TxContext;\n    use std::string::String;\n    use nft_protocol::attributes::Attributes;\n    use nft_protocol::collection;\n    use nft_protocol::mint_cap;\n    use nft_protocol::mint_event;\n    use sui::event;\n    \n    struct SuiFren has key {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n    }\n\n    struct SUIFREN has drop {}\n    \n    struct Witness has drop {}\n\n    struct DeleteFrenEvent has copy, drop {\n        fren_id: ID,\n    }\n\n    fun init(otw: SUIFREN, ctx: &mut TxContext) {\n        let (collection, mint_cap) =\n            collection::create_with_mint_cap<SUIFREN, SuiFren>(&otw, option::none(), ctx);\n        let delegated_witness = witness::from_witness(Witness {});\n        \n        collection::add_domain(\n            delegated_witness,\n            &mut collection,\n            display_info::new(\n                string::utf8(b\"SuiFrens\"),\n                string::utf8(b\"A collection of SuiFrens who hangout together\"),\n            ),\n        );\n        transfer::public_share_object(collection);\n        transfer::public_share_object(mint_cap);\n\n        let publisher = package::claim(otw, ctx);\n        let display_object = display::new<SuiFren>(&publisher, ctx);\n        display::add_multiple(\n            &mut display,\n            vector[\n                utf8(b\"generation\"),\n                utf8(b\"birthdate\"),\n            ],\n            vector[\n                utf8(b\"SuiFren generation: {generation}\"),\n                utf8(b\"Born on {birthdate}\"),\n            ],\n        );\n        display::update_version(&mut display);\n        transfer::public_transfer(display, tx_context::sender(ctx));\n    }\n\n    entry fun delete_fren(sui_fren: SuiFren) {\n        let SuiFren {id, generation: _, birthdate: _, attributes: _ } = sui_fren;\n        let fren_id = object::uid_to_inner(&id);\n        object::delete(id);\n        event::emit(DeleteFrenEvent { fren_id });\n    }\n}\n",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "10",
  "codeDef": "module 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::tx_context::TxContext;\n    use std::string::String;\n    use nft_protocol::attributes::Attributes;\n    use nft_protocol::collection;\n    use nft_protocol::mint_cap;\n    use nft_protocol::mint_event;\n    \n    struct SuiFren has key {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n    }\n\n    struct SUIFREN has drop {}\n    \n    struct Witness has drop {}\n\n    // Add the new event here\n\n    fun init(otw: SUIFREN, ctx: &mut TxContext) {\n        let (collection, mint_cap) =\n            collection::create_with_mint_cap<SUIFREN, SuiFren>(&otw, option::none(), ctx);\n        let delegated_witness = witness::from_witness(Witness {});\n        \n        collection::add_domain(\n            delegated_witness,\n            &mut collection,\n            display_info::new(\n                string::utf8(b\"SuiFrens\"),\n                string::utf8(b\"A collection of SuiFrens who hangout together\"),\n            ),\n        );\n        transfer::public_share_object(collection);\n        transfer::public_share_object(mint_cap);\n\n        let publisher = package::claim(otw, ctx);\n        let display_object = display::new<SuiFren>(&publisher, ctx);\n        display::add_multiple(\n            &mut display,\n            vector[\n                utf8(b\"generation\"),\n                utf8(b\"birthdate\"),\n            ],\n            vector[\n                utf8(b\"SuiFren generation: {generation}\"),\n                utf8(b\"Born on {birthdate}\"),\n            ],\n        );\n        display::update_version(&mut display);\n        transfer::public_transfer(display, tx_context::sender(ctx));\n    }\n\n    // Add the new function here\n}\n",
  "title": "Burning NFTs",
  "quizTitle": "1. Add a new event DeleteFrenEvent that just has the id (of type ID) of the SuiFren NFT that was deleted, named fren_id. Check out https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/packages/sui-framework/sources/object.move for how to create an ID from the object's UID field. \n2. Add a new entry function delete_fren that can delete a SuiFren NFT",
  "content": "Similar to normal objects, NFTs can also be burnt (destroyed). This is a common feature for games that can be used to:\n1. Implement item crafting. Users can burn a few ingredient items to craft a weapon or concoct a potion.\n2. Represent item loss. When an armor is broken, it's burnt and disappears from the user's inventory.\n\nApplications can also burn consumable NFTs such as concert or raffle tickets.\n```\nuse nft_protocol::mint_event;\n\nstruct Witness has drop {}\n\nstruct Ticket has key {\n    id: UID,\n    expiration: u64,\n}\n\npublic fun clip_ticket(\n    collection: &mut Collection<Ticket>,\n    ticket: Ticket,\n) {\n    let Ticket {id, expiration: _ } = ticket;\n    object::delete(id);\n    \n    // Update collection's supply\n}\n```\nThis will destroy the NFT - it'll be removed from object storage after the transaction is executed. Note that if the collection tracks a supply of tickets (how many tickets are currently available), the supply attribute needs to be updated. See the earlier lesson on update collection's attributes for more details how."
}
