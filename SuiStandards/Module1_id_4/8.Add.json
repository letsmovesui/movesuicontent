{
  "codeSol": "module 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::tx_context::TxContext;\n    use std::string::String;\n    use nft_protocol::attributes::Attributes;\n    use nft_protocol::collection;\n    use nft_protocol::mint_cap;\n    use nft_protocol::mint_event;\n    use nft_protocol::display_info;\n    \n    struct SuiFren has key {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: Attributes,\n    }\n\n    struct SUIFREN has drop {}\n    \n    struct Witness has drop {}\n\n    fun init(otw: SUIFREN, ctx: &mut TxContext) {\n        let (collection, mint_cap) =\n            collection::create_with_mint_cap<SUIFREN, SuiFren>(&otw, option::none(), ctx);\n        let delegated_witness = witness::from_witness(Witness {});\n        collection::add_domain(\n            delegated_witness,\n            &mut collection,\n            display_info::new(\n                string::utf8(b\"SuiFrens\"),\n                string::utf8(b\"A collection of SuiFrens who hangout together\"),\n            ),\n        );\n\n        let shares = vector[100];\n        let creator = tx_context::sender(ctx);\n        let shares = utils::from_vec_to_map(creator, shares);\n        royalty_strategy_bps::create_domain_and_add_strategy(\n            delegated_witness, &mut collection, royalty::from_shares(shares, ctx), 200, ctx,\n        );    \n\n        let publisher = package::claim(otw, ctx);\n        let (transfer_policy, transfer_policy_cap) =\n            transfer_request::init_policy<SuiFren>(&publisher, ctx);\n        royalty_strategy_bps::enforce(&mut transfer_policy, &transfer_policy_cap);\n\n        transfer::public_transfer(collection, tx_context::sender(ctx));\n        transfer::public_share_object(mint_cap);\n    }\n\n    public fun update_collection_description(collection: &mut Collection<SuiFren>, new_description: String) {\n        display_info::change_description(collection::borrow_uid_mut(Witness {}, collection), new_description);\n    }\n}\n",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "8",
  "codeDef": "module 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::tx_context::TxContext;\n    use std::string::String;\n    use nft_protocol::attributes::Attributes;\n    use nft_protocol::collection;\n    use nft_protocol::mint_cap;\n    use nft_protocol::mint_event;\n    \n    struct SuiFren has key {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: Attributes,\n    }\n\n    struct SUIFREN has drop {}\n    \n    struct Witness has drop {}\n\n    fun init(otw: SUIFREN, ctx: &mut TxContext) {\n        let (collection, mint_cap) =\n            collection::create_with_mint_cap<SUIFREN, SuiFren>(&otw, option::none(), ctx);\n        let delegated_witness = witness::from_witness(Witness {});\n        collection::add_domain(\n            delegated_witness,\n            &mut collection,\n            display_info::new(\n                string::utf8(b\"SuiFrens\"),\n                string::utf8(b\"A collection of SuiFrens who hangout together\"),\n            ),\n        );\n\n        let shares = vector[100];\n        let creator = tx_context::sender(ctx);\n        let shares = utils::from_vec_to_map(creator, shares);\n        royalty_strategy_bps::create_domain_and_add_strategy(\n            delegated_witness, &mut collection, royalty::from_shares(shares, ctx), 200, ctx,\n        );    \n\n        let publisher = package::claim(otw, ctx);\n        let (transfer_policy, transfer_policy_cap) =\n            transfer_request::init_policy<SuiFren>(&publisher, ctx);\n        royalty_strategy_bps::enforce(&mut transfer_policy, &transfer_policy_cap);\n\n        transfer::public_share_object(collection);\n        transfer::public_share_object(mint_cap);\n    }\n\n    // Add the new function here\n}\n",
  "title": "Add, update and remove Collection's attributes",
  "quizTitle": "1. Update init function to send the Collection object to the module publisher.\n2. Add a new public function update_collection_description that allows the module publisher to update the description to a specified new_description string.",
  "content": [
    "In an earlier lesson, we looked at how NFT collection can be created with a list of predefined attributes:\n",
    "```\n",
    "use nft_protocol::display_info;\n",
    "use ob_permissions::witness;\n",
    "use std::string::{Self, String};\n",
    "\n",
    "/// Can be used for authorization of other actions post-creation. It is\n",
    "/// vital that this struct is not freely given to any contract, because it\n",
    "/// serves as an auth token.\n",
    "struct Witness has drop {}\n",
    "\n",
    "fun init(otw: KITE, ctx: &mut TxContext) {\n",
    "    let (collection, mint_cap) =\n",
    "        collection::create_with_mint_cap<KITE, KiteNFT>(&otw, option::none(), ctx);\n",
    "    let delegated_witness = witness::from_witness(Witness {});\n",
    "    \n",
    "    collection::add_domain(\n",
    "        delegated_witness,\n",
    "        &mut collection,\n",
    "        display_info::new(\n",
    "            string::utf8(b\"Kites\"),\n",
    "            string::utf8(b\"A NFT collection of Kites on Sui\"),\n",
    "        ),\n",
    "    );\n",
    "}\n",
    "```\n",
    "\n",
    "These attributes can also be modified after the collection has already been created. Permission-wise, developers have two options:\n",
    "1. Allow anyone to modify a collection's attributes, subject to specific rules (e.g. being a specific account as defined by the protocol). In this case, the Collection object needs to be a shared object.\n",
    "2. Keep the collection object as an owned object and transfer it to the account that has the permission to modify the collection's attributes later.\n",
    "\n",
    "Either way, this would give access to specify a mutable reference to the collection object when calling the functions that add/update/remove collection attributes. To add a group of attributes (domain) later, we just need the delegated witness object and call collection::add_domain again.\n",
    "```\n",
    "public fun add_collection_attributes_group(collection: &mut Collection<KiteNFT>, attributes: vector<String>) {\n",
    "    collection::add_domain(\n",
    "        delegated_witness,\n",
    "        &mut collection,\n",
    "        attributes,\n",
    "    );\n",
    "}\n",
    "```\n",
    "\n",
    "Since domain can be any type, it can be a single attribute or a group of - you can add a vector, VectorMap or any other containers that contain multiple attributes. Note that each type of domain can only be added once as they're added via dynamic fields behind the scene.\n",
    "\n",
    "To modify an existing domain (can be a single attribute or a container of attributes):\n",
    "```\n",
    "public fun update_collection_string_attribute(collection: &mut Collection<KiteNFT>, new_value: String) {\n",
    "    let string_attribute = collection::borrow_domain_mut<KiteNFT, String>(\n",
    "        delegated_witness,\n",
    "        &mut collection,\n",
    "    );\n",
    "    *string_attribute = new_value;\n",
    "}\n",
    "```\n",
    "\n",
    "To modify the name or description that were set for the collection using DisplayInfo:\n",
    "```\n",
    "public fun update_collection_name_and_desc(collection: &mut Collection<KiteNFT>, new_name: String, new_desc: String) {\n",
    "    display_info::change_name(collection::borrow_uid_mut(Witness {}, collection), new_name);\n",
    "    display_info::change_description(collection::borrow_uid_mut(Witness {}, collection), new_desc);\n",
    "}\n",
    "```\n",
    "\n",
    "To delete a domain, including DisplayInfo since it's droppable:\n",
    "```\n",
    "public fun delete_collection_display_info(collection: &mut Collection<KiteNFT>) {\n",
    "    collection::remove_domain<KiteNFT, DisplayInfo>(Witness {}, collection);\n",
    "}\n",
    "```\n"
  ]
}
