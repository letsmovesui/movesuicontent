{
  "curStatus": "ready",
  "description": "",
  "id": "6",
  "lesson": [
    {
      "codeSol": "public fun remove_duplicates(v: &mut vector<u64>) {\n    let i = 0;\n    while (i < vector::length(v)) {\n        if (borrow(v, i) == borrow(v, i + 1)) {\n            remove(v, i);\n        } else {\n            i = i + 1;\n        }\n    }\n}",
      "quizType": "CODING",
      "answers": [],
      "lessonId": "1",
      "codeDef": "public fun remove_duplicates(v: &mut vector<u64>) {\n    // Write the code here\n}",
      "title": "Vectors",
      "quizTitle": "Remove duplicates from a sorted `vector` using while loop\n",
      "content": "*Vector* in Move is a dynamic array that can grow and shrink in size. It is a generic type, meaning it can hold any type of data, from primitive types to complex structs. It is similar to the `Vec` type in Rust or `ArrayList` in Java.\nThe `vector` module in Move has several native functions that allow you to create, access, and manipulate vectors. The native functions are directly written in Rust and invoked through the Sui Move VM and thus are faster and more efficient than writing the same functions in Move.\nIn order to create a vector, there are two ways:\n1. Use a `vector` literal:\n```\nlet v = vector[1, 2, 3, 4];\n```\n2. Use the empty function:\n```\nlet v = vector::empty<u64>();\n```\nNote that the type hint `<u64>` might not be required if elements are added to this vector in the same function.\n```\nlet v = vector::empty();\nvector::push_back(&mut v, 1);\n```\n\nTo read a value from a vector, use the borrow function:\n```\nlet v = vector[1, 2, 3, 4];\nlet x = vector::borrow(&v, 2);\n```\nNote that x is a reference type which means it cannot be modified. If the values in the vector are copiable (have the copy ability), you can make a copy by dereferencing:\n```\nlet v = vector[1, 2, 3, 4];\nlet x = *vector::borrow(&v, 2);\n```\n\nTo modify a value of a vector in-place, use the borrow_mut function:\n```\nlet v = vector[1, 2, 3, 4];\nlet x = vector::borrow_mut(&mut v, 2);\n*x = *x + 1;\n```\n\nTo remove the last element from a vector, use the pop_back function:\n```\nlet v = vector[1, 2, 3, 4];\nlet x = vector::pop_back(&mut v);\n```\n\nYou can also remove a specific occurrence of an element from a vector by using `index_of` and `swap_remove` functions:\n```\nlet v = vector[1, 2, 3, 4];\nlet (found, i) = vector::index_of(&v, 3);\nif (found) {\n    vector::swap_remove(&mut v, i);\n}\n```\n\n`Arrays` can be combined and reversed:\n```\nlet v1 = vector[1, 2, 3];\nlet v2 = vector[4, 5, 6];\nvector::append(&mut v1, v2);\nvector::reverse(&mut v1);\n```"
    },
    {
      "codeSol": "module exercise::whitelist {\n    use sui::table::{Self, Table};\n    use sui::tx_context::TxContext;\n\n    // Create a new whitelist\n    public fun new(ctx: &mut TxContext) -> Table<u64, bool> {\n        table::new(ctx)\n    }\n\n    // Add an address to the whitelist\n    public fun add(table: &mut Table<u64, bool>, address: u64) {\n        table::add(table, address, true)\n    }\n\n    // Remove an address from the whitelist\n    public fun remove(table: &mut Table<u64, bool>, address: u64) {\n        table::remove(table, address)\n    }\n\n    // Check if an address is in the whitelist\n    public fun contains(table: &Table<u64, bool>, address: u64) -> bool {\n        table::contains(table, address)\n    }\n}",
      "quizType": "CODING",
      "answers": [],
      "lessonId": "2",
      "codeDef": "module exercise::whitelist {\n    use sui::table::{Self, Table};\n    use sui::tx_context::TxContext;\n\n    // Create a new whitelist\n    public fun new(ctx: &mut TxContext) -> Table<u64, bool> {\n    }\n\n    // Add an address to the whitelist\n    public fun add(table: &mut Table<u64, bool>, address: u64) {\n    }\n\n    // Remove an address from the whitelist\n    public fun remove(table: &mut Table<u64, bool>, address: u64) {\n    }\n\n    // Check if an address is in the whitelist\n    public fun contains(table: &Table<u64, bool>, address: u64) -> bool {\n    }\n}",
      "title": "Table",
      "quizTitle": "Exercise: Add functions to create, add, and remove address from a whitelist.",
      "content": "Tables are a map-like collection. They use dynamic fields underneath and just store the keys and values in the object system. This allows for an efficient and flexible data structure that can store up to a thousand entries, which is also the limit of dynamic fields. Tables are not stored in the object system, but are just handles into the object system.\nWhen developers need to store a lot of data, such as for an allowlist, they should use a table.\nOne caveat here is that there are restrictions on the types of keys and values that can be used in a table. The key type must be copy, drop, and store, and the value type must be store. This is because the table needs to be able to copy the keys, and the values need to be stored in the object system.\nIn general, all primitive types (numbers, bools, etc.) can be used as keys and values. Custom structs need to follow the above rules to be usable as keys or values in a table.\nNote that tables are also objects as the Table struct has a UID field and key ability. This means they can exist independent of other objects or wrapped in other objects.\n\nTo create a table:\n```\nlet table = table::new<u64, bool>();\n```\n\nThe type specification `<u64, bool>` is not required if an entry is added to the table immediately after creation. The type of the key and value will be inferred from the first entry added to the table.\n```\nlet table = table::new();\n// A table of type <string, u64> is created\ntable::add(&mut table, string::utf8(b\"My key\"), 1);\n```\n\nTo read a value from a table:\n```\nlet table = table::new<u64, bool>();\ntable::add(&mut table, 0, false);\nlet value = table::borrow(&table, 0);\n```\nValue is a reference type and can be copied by dereferencing if it has copy ability.\n```\nlet value = *table::borrow(&table, 0);\n```\n\nTo modify a value from the table directly:\n```\nlet value = table::borrow_mut(&table, 0);\n*value = true;\n```\n\nTo remove a value from the table, we need the key:\n```\nlet table = table::new<u64, bool>();\ntable::add(&mut table, 0, false);\nlet value = table::remove(&mut table, 0);\n```\nNote that remove returns the value in case it needs to be used after removal or doesn't have the drop ability (and thus can't be dropped automatically).\n\nA table doesn't have the drop ability and has to be explicitly destroyed when all items are removed:\n```\nlet table = table::new<u64, bool>();\ntable::add(&mut table, 0, false);\ntable::remove(&mut table, 0);\ntable::destroy_empty(table);\n```\n\nTables can also be destroyed when not empty if values have the drop ability. However, take caution here as dropping a large table with a lot of values can cost a lot of gas.\n```\nlet table = table::new<u64, MyStruct>();\ntable::add(&mut table, 0, MyStruct());\ntable::drop(table);\n```"
    },
    {
      "codeSol": "public fun remove_duplicates<K: copy + drop + store, V: store>(table: &mut LinkedTable<K, V>) {\n    let mut current = *option::borrow(&table.head);\n    while (option::is_some(&linked_table::next(table, current))) {\n        let next = *option::borrow(&linked_table::next(table, current));\n        if (linked_table::borrow(table, current) == linked_table::borrow(table, next)) {\n            linked_table::remove(table, next);\n        } else {\n            current = next;\n        }\n    }\n}",
      "quizType": "CODING",
      "answers": [],
      "lessonId": "3",
      "codeDef": "public fun remove_duplicates<K: copy + drop + store, V: store>(table: &mut LinkedTable<K, V>) {\n    // Your code here\n}",
      "title": "Linked Table (LinkedList)",
      "quizTitle": "Exercise: Implement a function to remove duplicates from a linked table where all elements are already sorted.",
      "content": "Linked list is a data structure that consists of a sequence of elements where each element points to the next element.\nLinked lists are useful data structures to implement more sophisticated protocols such as Order book and offer the following benefits:\n- Dynamic size: Linked lists are dynamic data structures that can grow and shrink as needed.\n- Insertion and removal are one operation each instead of removing an element from a vector which requires shifting all the elements after it.\n- Insertion order: Elements are stored in the order they are inserted. This can be very useful for specific programs.\n\nLinked lists in Sui Move can be created using Linked Table and offer the following extra benefits:\n- *Scaling*: `Linked Table` can be used to store a large number of elements as it uses dynamic fields to store the elements.\n- `LinkedTable` can also be a standalone object or a field in another object.\n- Iteration outside of loops: `Linked Table` can be iterated using the `prev` and `next` functions to traverse the list.\n\nTo create a `Linked Table`:\n```\nlet mut table = linked_table::new::<u64, u64>(ctx);\n```\n\nType specification <u64, u64> is technically not required if insertion is done immediately after creation:\n```\nlet mut table = linked_table::new(ctx);\nlinked_table::push_back(&mut table, 1, 10);\n```\n\nTo insert a key-value pair at the front of the table:\n```\nlinked_table::push_front(&mut table, 2, 20);\n```\n\nTo insert a key-value pair at the back of the table:\n```\nlinked_table::push_back(&mut table, 3, 30);\n```\nNote that keys added to the linked table must have copy, drop, and store abilities. Values must have store ability.\n\nTo remove the key-value pair in the table and return the value:\n```\nlet value = linked_table::remove(&mut table, 2);\n```\n\nLinked Table can be traversed using the `prev` and `next` functions:\n```\nlet current = linked_table::front(&table);\nwhile option::is_some(current) {\n    let key = option::unwrap(current);\n    let value = linked_table::borrow(&table, key);\n    current = linked_table::next(&table, key);\n}\n```\nCurrent key can be passed to other function to iterate without using a loop (e.g. with recursion).\n\nSimilar to Table, Linekd Table cannot be dropped automatically as it doesn't have the drop ability. It can only be destroyed explicitly in two ways:\n- `linked_table::destroy_empty(table)` can be used to destroy an empty table.\n- `linked_table::drop(table)` can be used to drop a possibly non-empty table. Take caution as this can be very expensive gas-wise if the table is large.\n"
    },
    {
      "codeSol": "",
      "quizType": "ANSWERS",
      "answers": [
        {
          "answer": "A. TableVec can be created with literal with vector cannot",
          "isCorrect": false
        },
        {
          "answer": "B. TableVec scales better than vector with large amount of items",
          "isCorrect": true
        },
        {
          "answer": "C. vector is fixed-sized while TableVec is not",
          "isCorrect": false
        }
      ],
      "lessonId": "4",
      "codeDef": "",
      "title": "Table vec (Large vectors)",
      "quizTitle": "What's the difference between `vector` and `TableVec`?",
      "content": "The standard vector is not efficient when there's a large number of items to be added (more than a few tens). This is because the bigger the vector is, the more gas it would be to update it such as adding a new element as this leads to more I/O cost to execute such transactions.\nGenerally, developers should use table-based vectors (`TableVec`) to store a large number of items. `TableVec` is a scalable vector that is implemented using the `Table` module. It is efficient for adding, removing, and accessing elements.\nTo create a `TableVec`:\n```\nlet t = table_vec::empty::<u64>(ctx);\n```\nNote that TableVec can only be used to store values that have the store ability. This includes all primitive types and structs that have the store ability.\n\nTo add an element to the end of the TableVec:\n```\ntable_vec::push_back(&mut t, 10);\n```\n\nTo get the length of the TableVec:\n```\nlet len = table_vec::length(&t);\n```\n\nTo get the element at a particular index:\n```\nlet element = table_vec::borrow(&t, 0);\n```\n\nTo remove the last element from the `TableVec`:\n```\nlet last_element = table_vec::pop_back(&mut t);\n```\n\nTo remove an element at a particular index:\n```\nlet element = table_vec::swap_remove(&mut t, 0);\n```\n\nSimilar to Table and LinkedTable, TableVec cannot be dropped automatically and has to be destroyed explicitly:\n1. If the `TableVec` is empty, it can be destroyed using `table_vec::destroy_empty(t)`.\n2. If the `TableVec` is non-empty, it can be dropped using `table_vec::drop(t)`. Take caution when using this function as it can take a lot of gas to execute if the `TableVec` is large.\n\nTo modify an element at a particular index:\n```\nlet mut element = table_vec::borrow_mut(&mut t, 0);\n*element = 20;\n```"
    },
    {
      "codeSol": "",
      "quizType": "ANSWERS",
      "answers": [
        {
          "answer": "A. TableVec can be created with literal with vector cannot",
          "isCorrect": false
        },
        {
          "answer": "B. TableVec scales better than vector with large amount of items",
          "isCorrect": true
        },
        {
          "answer": "C. vector is fixed-sized while TableVec is not",
          "isCorrect": false
        }
      ],
      "lessonId": "5",
      "codeDef": "",
      "title": "Bag of heterogeneous data",
      "quizTitle": "What's the difference between `Bag` and `Table`?",
      "content": "Different from vector and table-based data structures which can only store elements of the same type, a bag can store elements of different types. This is because a bag is a collection of key-value pairs, where the key is a unique identifier and the value is the data associated with the key. The key can be of any type, and the value can be of any type. This makes a bag a very flexible data structure, but also a bit more complex to work with than a vector or table.\nBoth table-based data structures and Bag use dynamic fields under the hood. Bags are especially useful for situation where developers want to accept different types of payment Coins or miscellaneous objects.\nNote that since Bag also uses dynamic fields, it can only store up to 1000 items (limit on number of dynamic fields).\n\nTo create a Bag:\n```\nlet bag = bag::new();\n```\n\nTo add a key-value pair to a bag:\n```\nbag::add(&mut bag, b\"name\", b\"John Doe\");\nbag::add(&mut bag, b\"age\", 25);\n```\nPairs with the same keys cannot exist in the same Bag.\nOnly keys that have the copy, drop, and store abilities can be added to a Bag. Only values that have the store ability can be added.\n\nTo retrieve a value from a bag:\n```\nlet name = bag::borrow(&bag, b\"name\");\nlet age = bag::borrow(&bag, b\"age\");\n```\n\nTo modify a value in a bag:\n```\nlet age = bag::borrow_mut(&mut bag, b\"age\");\n*age = 26;\n```\n\nThere are two ways to check if an element is in a Bag:\n1. Check if a specific key exists in the Bag:\n```\nif (bag::contains(&bag, b\"name\")) {\n    // do something\n}\n```\n2. Check if a key exists and that the value is of specific type:\n```\nif (bag::contains_with_type::<vector<u8>, u64>(&bag, b\"age\")) {\n    // do something\n}\n```\n\nTo remove a value from a bag:\n```\nlet age = bag::remove(&mut bag, b\"age\");\n```\n\nA Bag cannot be destroyed automatically. It must be empty before it can be destroyed:\n```\nbag::destroy_empty(bag);\n```"
    },
    {
      "codeSol": "public fun sort<T: copy>(v: vector<T>): vector<T> {\n    let pq = priority_queue::new(vector[]);\n    let i = 0;\n    while (i < vector::length(&v)) {\n        priority_queue::insert(&mut pq, vector::borrow(&v, i), vector::borrow(&v, i));\n        i = i + 1;\n    };\n    let res = vector[];\n    while (vector::length(&pq.entries) > 0) {\n        let (_, value) = priority_queue::pop_max(&mut pq);\n        vector::push_back(&mut res, value);\n    };\n    res\n}",
      "quizType": "CODING",
      "answers": [],
      "lessonId": "6",
      "codeDef": "public fun sort<T: copy>(v: vector<T>): vector<T> {\n    // Implement\n}",
      "title": "Priority queue",
      "quizTitle": "Exercises: Given a vector of elements, sort it using a priority queue.",
      "content": "Priority queue is a data structure that allows you to insert elements with a priority and then pop the element with the highest priority. It's a very useful data structure and is used in many algorithms and applications.\nPriority queues are great for keeping items sorted and quickly finding the item with the highest priority.\n\nIn Sui Move, PriorityQueue can be created with custom priority for each entry. Comparison functions might be added in later evolutions of Sui Move.\n\nTo create a new PriorityQueue:\n```\nlet h = priority_queue::new(create_entries(vector[3,1,4,2,5,2], vector[10, 20, 30, 40, 50, 60]));\n```\nThe types of elements can be inferred from the entries created.\n\nTo insert a single new entry:\n```\npriority_queue::insert(&mut h, 7, 70);\n```\n\nTo pop the entry with the highest priority:\n```\nlet (priority, value) = priority_queue::pop_max(&mut h);\n```\nCurrently, the priority queue does not allow changing the priority or value of an existing entry. Nor does it allow removing an arbitrary entry. These features might be added in later evolutions of Sui Move."
    },
    {
      "codeSol": "",
      "quizType": "ANSWERS",
      "answers": [
        {
          "answer": "A. Table should be used to store many items while VecMap is good for a small number",
          "isCorrect": true
        },
        {
          "answer": "B. Table cannot be dropped automatically while VecMap can",
          "isCorrect": false
        },
        {
          "answer": "C. VecMap is fix-sized",
          "isCorrect": false
        }
      ],
      "lessonId": "7",
      "codeDef": "",
      "title": "Vector-based map",
      "quizTitle": "What's the difference between VecMap and Table?",
      "content": "VecMap a simple map data structure backed by a vector. The map is guaranteed not to contain duplicate keys, but entries are *not* sorted by key--entries are included in insertion order.\nSimilar to vectors, VecMap should not be used when there's a large number of elements as this can lead to higher gas cost for access and updates. Tables should be used when there's a large number of elements.\n\nVecMap allows access either by key or by index (based on insertion order).\nTo create a new VecMap:\n```\nlet map = vec_map::empty<u64, u64>();\n```\n\nTo insert a new key-value pair:\n```\nvec_map::insert(&mut map, 1, 2);\n```\n\nTo remove a key-value pair:\n```\nvec_map::remove(&mut map, &1);\n```\n\nTo access element by key:\n```\nlet value = vec_map::get(&map, &1);\n```\nIn case you're not sure if the key exists and don't want to get an error which would abort the entire transaction, you can use `try_get`:\n```\nlet value_opt = vec_map::try_get(&map, &1);\nif (option::is_some(&value_opt)) {\n    let value = option::unwrap(value_opt);\n}\n```\n\nTo access element by index:\n```\nlet (key, value) = vec_map::get_entry_by_idx(&map, 0);\n```\n\nTo modify an element by key:\n```\n*vec_map::get_mut(&mut map, &1) = 3;\n```\n\nTo modify an element by index:\n```\n*vec_map::get_entry_by_idx_mut(&mut map, 0).1 = 3;\n```\n\nTo unpack the map into vectors of its keys and values:\n```\nlet (keys, values) = vec_map::into_keys_values(map);\n```\n\nVecMap cannot be automatically dropped. All elements must be explicitly removed first before the VecMap can be destroyed:\n```\nvec_map::destroy_empty(map);\n```\n\nOther useful functions include:\n- `size` to get the number of elements in the map\n- `is_empty` to check if the map is empty\n- `keys` to get a list of keys in the map"
    },
    {
      "codeSol": "public fun remove_duplicates(v: vector<u64>): vector<u64> {\n    let set = vec_set::empty();\n    let i = 0;\n    while (i < vector::length(&v)) {\n        let x = vector::get(&v, i);\n        if (!vec_set::contains(&set, &x)) {\n            vec_set::insert(&mut set, x);\n        }\n        i = i + 1;\n    };\n    vec_set::into_keys(set)\n}",
      "quizType": "CODING",
      "answers": [],
      "lessonId": "8",
      "codeDef": "public fun remove_duplicates(v: vector<u64>): vector<u64> {\n    // Implement\n}",
      "title": "Vector-based Set",
      "quizTitle": "Use a VecSet to remove duplicates from a vector",
      "content": "Similar to VecMap, VecSet is a vector-based set data structure. Sets are useful for the following use cases:\n- Deduplicate an input vector of elements\n- Avoid duplicates when inserting elements into a collection\n\nNote that VecSet's insertion and removal are O(n) instead of O(1) like HashSet or O(log n) like tree-based sets. This is because VecSet is backed by a vector, and it needs to scan the entire vector to check for duplicates.\nAnother limitation is that VecSet should not be used to store large numbers of elements, as the gas cost will be high for all operations.\n\nTo create a VecSet:\n```\nlet mut set = vec_set::empty<u64>();\n```\n\nTo insert an element into the set:\n```\nvec_set::insert(&mut set, 1);\n```\nElements inserted into a VecSet must have copy and drop abilities.\n\nTo remove an element from the set:\n```\nvec_set::remove(&mut set, &1);\n```\n\nTo check if an element is in the set:\n```\nvec_set::contains(&set, &1);\n```\n\nTo get the number of elements in the set:\n```\nvec_set::size(&set);\n```\n\nTo check if the set is empty:\n```\nvec_set::is_empty(&set);\n```"
    },
    {
      "codeSol": "",
      "quizType": "ANSWERS",
      "answers": [
        {
          "answer": "A. ObjectTable can store only objects while Table can store anything that has the right abilities",
          "isCorrect": true
        },
        {
          "answer": "B. Table cannot store objects",
          "isCorrect": false
        },
        {
          "answer": "C. ObjectTable is bounded",
          "isCorrect": false
        }
      ],
      "lessonId": "9",
      "codeDef": "",
      "title": "Object data structures: Object bag, Object table",
      "quizTitle": "What's the difference between ObjectTable and Table?",
      "content": "ObjectBag and ObjectTable are similar data structures to Bag and Table, respectively and can store elements of different types. The difference is that ObjectBag and ObjectTable are designed to store objects, and the objects are stored in the storage. This is important for external tools to be able to access the objects. The difference is not observable from within Move.\n\nTo create an ObjectBag or ObjectTable:\n```\nlet bag = object_bag::new::<T>(ctx);\nlet table = object_table::new::<K, V>(ctx);\n```\n\nTo add an object to the bag or table:\n```\nobject_bag::add(&mut bag, obj);\nobject_table::add(&mut table, key, obj);\n```\n\nTo borrow an object from the bag or table:\n```\nlet obj = object_bag::borrow(&bag, id);\nlet obj = object_table::borrow(&table, key);\n```\n\nTo modify an object from the bag or table:\n```\nlet obj = object_bag::borrow_mut(&mut bag, id);\nobj.property = value;\nlet obj = object_table::borrow_mut(&mut table, key);\nobj.property = value;\n```\n\nTo remove an object from the bag or table:\n```\nlet obj = object_bag::remove(&mut bag, id);\nlet obj = object_table::remove(&mut table, key);\n```\n\nTo check if an object exists in the bag or table:\n```\nlet exists = object_bag::contains(&bag, id);\nlet exists = object_table::contains(&table, key);\n```\n\nTo get the number of objects in the bag or table:\n```\nlet len = object_bag::length(&bag);\nlet len = object_table::length(&table);\n```"
    },
    {
      "codeSol": "",
      "quizType": "ANSWERS",
      "answers": [
        {
          "answer": "VecMap is fix-sized",
          "isCorrect": false
        },
        {
          "answer": "LinkedTable is based on Table so it's always better than vector",
          "isCorrect": false
        },
        {
          "answer": "LinkedTable is more gas efficient and has more functionalities",
          "isCorrect": true
        }
      ],
      "lessonId": "10",
      "codeDef": "",
      "title": "Summary",
      "quizTitle": "Why use `LinkedTable` over `VecMap`?",
      "content": "In summary, when choosing which data structure to use, consider the following:\n1. **Gas cost**: Table-based data structures and bags have lower gas costs when used to store a large number of objects. This is because the cost of accessing an object in a table or bag is independent of the number of objects stored in the table or bag. In contrast, the cost of accessing an object in a vector is proportional to the number of objects stored in the vector.\n2. **Protocol needs**: Using the right data structure that offers the operations and functionalities a protocol needs is more efficient than using raw data structures and implementing the functionalities from scratch. PriorityQueue and LinkedTable for example are more efficient than using a vector and implementing the functionalities of a priority queue or a linked list.\n\n"
    }
  ],
  "title": "Data structures"
}
