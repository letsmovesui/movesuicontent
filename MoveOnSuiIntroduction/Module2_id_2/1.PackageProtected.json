{
  "codeSol": "module 0x123::fren_summer {\n    use 0x123::sui_fren;\n\n    public fun open_box(generation: u64, birthdate: u64, attributes: vector<String>, ctx: &mut TxContext) {\n        sui_fren::mint(generation, birthdate, attributes, ctx);\n    }\n}\n\nmodule 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::TxContext;\n    use std::string::String;\n    use std::vector;\n    use sui::event;\n\n    friend 0x123::fren_summer;\n    \n    struct SuiFren has key {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n\n    struct MintEvent has copy, drop {\n        id: ID,\n    }\n\n    public(friend) fun mint(generation: u64, birthdate: u64, attributes: vector<String>, ctx: &mut TxContext) {\n        let uid = object::new(ctx);\n        let id = object::uid_to_inner(&uid);\n        let sui_fren = SuiFren {\n            id: uid,\n            generation,\n            birthdate,\n            attributes,\n        };\n        transfer::transfer(sui_fren, tx_context::sender(ctx));\n        event::emit(MintEvent {\n            id,\n        });\n    }\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "1",
  "codeDef": "// Add the new module and function here\n\nmodule 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::TxContext;\n    use std::string::String;\n    use std::vector;\n    use sui::event;\n\n    // Add any friend declaration here\n    \n    struct SuiFren has key {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n\n    struct MintEvent has copy, drop {\n        id: ID,\n    }\n\n    // Update\n    public fun mint(generation: u64, birthdate: u64, attributes: vector<String>, ctx: &mut TxContext) {\n        let uid = object::new(ctx);\n        let id = object::uid_to_inner(&uid);\n        let sui_fren = SuiFren {\n            id: uid,\n            generation,\n            birthdate,\n            attributes,\n        };\n        transfer::transfer(sui_fren, tx_context::sender(ctx));\n        event::emit(MintEvent {\n            id,\n        });\n    }\n}",
  "title": "Package protected function - public(friend) and Gift boxes",
  "quizTitle": "Currently, anyone can mint `Sui Frens`. Let's:\n1. Make mint function friend only\n2. Add a new module `0x123::fren_summer` with a public function `open_box` which has the same signature as `sui_fren::mint` (for now) and call `sui_fren::mint` there. \nWe'll explain what this function will be used for in the next lessons.",
  "content": [
    "In the previous course, we have covered the basic concepts in Sui Move: Modules, Functions, Objects and Events. In this course, we'll dive deeper into more useful concepts in Move and Objects that allow us to build a more fun and complex Sui Fren world.\n",
    "\n",
    "Let's first talk about functions. In the previous course, we saw public and private functions:\n",
    "1. Public functions can be called by transactions (via Programmable Transaction Blocks that we'll cover later) and also by other Move code (same or different modules)\n",
    "2. Private functions can only be called within the same module.\n",
    "```\n",
    "module 0x123::my_module {\n",
    "    public fun public_equal(x: u64): bool {\n",
    "        x == 1000\n",
    "    }\n",
    "    \n",
    "    fun private_equal(x: u64): bool {\n",
    "        x == 1000\n",
    "    }\n",
    "}\n",
    "```\n",
    "If you recall, modules are grouped into packages for deployment on Sui. This leads to a third type of function visibility - `public(friend)`. `public(friend)` functions are similar to package-visible functions in other languages and can only be called by modules in the same package. This allows developers to limit dangerous functions to only be called by their own modules and not by others.\n",
    "```\n",
    "module 0x123::my_other_module {\n",
    "    use 0x123::my_module;\n",
    "\n",
    "    public fun do_it(x: u64): bool {\n",
    "        my_module::friend_only_equal(x)\n",
    "    }\n",
    "}\n",
    "\n",
    "module 0x123::my_module {\n",
    "    friend 0x123::my_other_module;\n",
    "\n",
    "    public(friend) fun friend_only_equal(x: u64): bool {\n",
    "        x == 1000\n",
    "    }\n",
    "}\n",
    "```\n",
    "To create a `public(friend)` function we just need to use the corresponding visibility modifier - `public(friend)`. Any modules such `0x123::my_other_module` in the example above that call the `public(friend)` function also needs to be declared explicitly as a \"friend\" - friend `0x123::my_other_module`. This explicit declaration is required for now but the Sui Move team has plans to make this not required in the future. This would truly make public(friend) functions package-visible.\n"
  ]
}
