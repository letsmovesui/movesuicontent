{
  "codeSol": "module 0x123::fren_summer {\n    use sui::object::{Self, UID};\n    use 0x123::sui_fren::{Self, SuiFren};\n    use sui::tx_context::{Self, TxContext};\n    use sui::transfer;\n\n    struct GiftBox has key {\n        id: UID,\n        inner: SuiFren,\n    }\n\n    entry fun open_box(gift_box: GiftBox, ctx: &TxContext) {\n        let GiftBox {id, inner} = gift_box;\n        object::delete(id);\n        transfer::public_transfer(inner, tx_context::sender(ctx));\n    }\n}\n\nmodule 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    \n    struct SuiFren has key, store {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "6",
  "codeDef": "module 0x123::fren_summer {\n    use sui::object::{Self, UID};\n    use 0x123::sui_fren::{Self, SuiFren};\n    use sui::tx_context::{Self, TxContext};\n    use sui::transfer;\n\n    struct GiftBox has key {\n        id: UID,\n        inner: SuiFren,\n    }\n\n    entry fun open_box(gift_box: GiftBox) {\n        \n    }\n}\n\nmodule 0x123::sui_fren {\n    use sui::object::{Self, UID};\n\n    struct SuiFren has key {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n}",
  "title": "Transfer Policy - Public and private transfers of objects",
  "quizTitle": "Update the `open_box` function in the `fren_summer` module to destruct the `GiftBox` object, take the inner `SuiFren` and then transfer that to the sender. Don't forget to update abilities.",
  "content": "We have already seen both owned objects in action:\n```\nstruct OwnedObject has key {\n    id: UID,\n}\n\npublic fun create_owned_object(tx_context: &mut TxContext) {\n  let owned_object = OwnedObject {\n      id: object::new(ctx),\n  };\n  transfer::transfer(owned_object, tx_context::sender(ctx));\n}\n```\nWe have also learnt about struct abilities - key, store, copy, drop. There's a special hidden feature that you can get by combining the store ability and the functionalities offer by the transfer module - Transfer Policy.\n\nWith Transfer Policy, developers can dictate if the objects they define can be transferred outside of their module code:\n1. Objects that have the store ability can be transferred outside of the same module it's defined in with `transfer::public_transfer`.\n```\nmodule 0x123::my_module {\n    struct OwnedObject has key, store {\n        id: UID,\n    }\n}\n\nmodule 0x123::your_module {\n    use 0x123::my_module::OwnedObject;\n    \n    public fun transfer(object: OwnedObject, receiver: address) {\n        transfer::public_transfer(object, receiver);\n    }\n}\n```\n2. Objects without the store ability can <b>only<b> be transferred with `transfer::transfer` inside the same module it's defined in. In the example above, if we remove the store ability from OwnedObject, the transfer function in `your_module` would stop working. OwnedObject can now only be transferred directly inside `my_module`:\n```\nmodule 0x123::my_module {\n    struct OwnedObject has key {\n        id: UID,\n    }\n    \n    public fun transfer(object: OwnedObject, receiver: address) {\n        transfer::transfer(object, receiver);\n    }\n}\n```\n\n"
}
