{
  "codeSol": "module 0x123::fren_summer {\n    use sui::object::{Self, UID};\n    use 0x123::sui_fren::{Self, SuiFren};\n\n    struct GiftBox has key {\n        id: UID,\n        inner: SuiFren,\n    }\n\n    entry fun open_box(generation: u64, birthdate: u64, attributes: vector<String>, ctx: &mut TxContext) {\n        sui_fren::mint(generation, birthdate, attributes, ctx);\n    }\n}\n\nmodule 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::TxContext;\n    use std::string::String;\n    use std::vector;\n    use sui::event;\n\n    friend 0x123::fren_summer;\n    \n    struct SuiFren has key, store {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "3",
  "codeDef": "module 0x123::fren_summer {\n    use sui::object::{Self, UID};\n    use 0x123::sui_fren::{Self, SuiFren};\n\n    // Add the new struct here\n\n    entry fun open_box(generation: u64, birthdate: u64, attributes: vector<String>, ctx: &mut TxContext) {\n        sui_fren::mint(generation, birthdate, attributes, ctx);\n    }\n}\n\nmodule 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::TxContext;\n    use std::string::String;\n    use std::vector;\n    use sui::event;\n\n    friend 0x123::fren_summer;\n    \n    struct SuiFren has key {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n}",
  "title": "Struct abilities - key, copy, drop, store",
  "quizTitle": "Give `SuiFren` store ability and define a new GiftBox object struct in the `fren_summer` module that has a field inner of type `SuiFren`. The GiftBox struct doesn't need store ability as it doesn't need to be part of any other structs.",
  "content": [
    "In the previous course, we learnt about structs and how a struct needs to have the key ability to become an object:\n",
    "```\n",
    "struct AdminCap has key {\n",
    "    id: UID,\n",
    "    num_frens: u64,\n",
    "}\n",
    "```\n",
    "Beside the key ability, structs can also have 3 other abilities: store, copy, and drop. Structs can have 1, 2, 3, or all 4 abilities. However, for a struct to have a specific ability, all of its fields must have the same ability.\n",
    "\n",
    "Store ability allows a struct to be part of other structs. Note that if `NestedStruct` below has another `DoubleNestedStruct` field, that struct also needs to have store ability.\n",
    "```\n",
    "struct NestedStruct has store {\n",
    "    value: u64,\n",
    "}\n",
    "\n",
    "struct Container has key {\n",
    "    id: UID,\n",
    "    nested: NestedStruct,\n",
    "}\n",
    "```\n",
    "Copy ability allows a struct to be \"copied\", which creates an instance of the struct with the same exact field values. Note that object structs (those with key ability and id field) cannot have the copy ability as the UID struct doesn't have copy.\n",
    "```\n",
    "struct CopyableStruct has copy {\n",
    "    value: u64,\n",
    "}\n",
    "\n",
    "fun copy(original: CopyableStruct) {\n",
    "    let copy = original;\n",
    "    original.value = 1;\n",
    "    copy.value = 2;\n",
    "    // We now have two CopyableStructs with two different values.\n",
    "}\n",
    "```\n",
    "Drop ability allows a struct to be implicitly destroyed at the end of a function without having to \"destruct\":\n",
    "```\n",
    "struct DroppableStruct has drop {\n",
    "    value: u64,\n",
    "}\n",
    "\n",
    "fun copy() {\n",
    "    let droppable = DroppableStruct { value: 1 };\n",
    "    // At the end of this function, droppable would be destroyed.\n",
    "    // We don't need to explicitly destruct:\n",
    "    // let DroppableStruct { value: _ } = droppable;\n",
    "}\n",
    "```\n",
    "It's very important to remember that a struct can only have an ability if ALL of its fields have the same ability. Without remembering this, developers can get very confused if they try to create a droppable struct while having an undroppable field."
  ]
}
