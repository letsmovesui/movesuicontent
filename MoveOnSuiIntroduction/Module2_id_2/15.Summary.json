{
  "codeSol": "",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "15",
  "codeDef": "",
  "title": "Summary",
  "quizTitle": "",
  "content": "This module furthers your understandings of basic Sui Move. \n\n**Functions** We are learning two more types of functions:\n1. Public (friend) functions: similar to package-visible functions in other languages and can only be called by modules in the same package. This allows developers to limit dangerous functions to only be called by their own modules and not by others.\n2. Private (entry) function: can only be called directly from a transaction, but not from other Move code.\n\n**Programmable Transaction Block (PTB)** allows users to specify a series of actions (transactions) to be sent to the network as a single transaction. The actions are executed sequentially and are atomic - if any of them fails, the entire PTB fails and all changes are automatically reverted\n\n**Struct** \nBeside key ability, structs also offer 3 more abilities: \n1. Store ability allows a struct to be part of other structs. \n2. Copy ability allows a struct to be \"copied\", which creates an instance of the struct with the same exact field values.\n3. Drop ability allows a struct to be implicitly destroyed at the end of a function without having to \"destruct\".\n\nStruct data access. This allows developers to define rules for how their data (structs) can be read or written. They can keep the data private and not allow any external modules to access inner fields, or they can implement public getters (return an inner field's values) and setters (set an inner field's value) that can be called by external modules. They can also implement custom authentication module that requires a specific permission object to be able to update the struct's values.\n\n**Object**\n1. Object Wrapping: a method for encapsulating objects within other objects, a key technique for creating layered data structures and managing ownership and access in a more granular manner.\n2. Immutable Object: is the third type of objects beside shared objects and owned objects. Immutable object can be included  as part of users' transactions but can NEVER be changed after they're \"frozen\".\n3. System Object: Witness Object, Publisher Object, Display Object, Clock\n4. Transferability: \n- Objects that have the store ability can be transferred outside of the same module. Objects without the store ability can ONLY be transferred with transfer::transfer inside the same module it's defined in.\n- Share and public_share objects: the developers can allow their objects to only be owned or also sharable.\n- Freeze and public_freeze, developers can similarly decide if they want the owners to be able to make their objects immutable\nGolden rules for choosing types of objects to use:\n* Immutable objects for all shared state of a contract if the data never changes.\n* Shared objects for shared state that can be updated.\n* Owned objects for everything else."
}
