{
  "codeSol": "module 0x123::fren_summer {\n    use sui::object::{Self, UID};\n    use 0x123::sui_fren::{Self, SuiFren, Candy};\n    use sui::tx_context;\n\n    struct GiftBox has key {\n        id: UID,\n        inner: SuiFren,\n        candies: vector<Candy>,\n    }\n}\n\nmodule 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::TxContext;\n    use std::string::String;\n    use std::vector;\n    use sui::event;\n\n    friend 0x123::fren_summer;\n    \n    struct SuiFren has key, store {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n\n    struct Candy has store {\n        value: u64,\n    }\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "8",
  "codeDef": "module 0x123::fren_summer {\n    use sui::object::{Self, UID};\n    use 0x123::sui_fren::{Self, SuiFren, Candy};\n    use sui::tx_context;\n\n    // Update\n    struct GiftBox has key {\n        id: UID,\n        inner: SuiFren,\n    }\n}\n\nmodule 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::TxContext;\n    use std::string::String;\n    use std::vector;\n    use sui::event;\n\n    friend 0x123::fren_summer;\n    \n    struct SuiFren has key, store {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n\n    // Add the new struct here\n}",
  "title": "Wrapping Objects vs Non-object structs",
  "quizTitle": "Create a new struct `Candy` in the `sui_fren` module that has a single field value of type `u64` and add a new field candies to `GiftBox` of type vector of `Candies`. For now `Candy` is a non-object struct and we'll feed the candies to `Fren` to up-level them in later sessions.",
  "content": "In a previous lesson, we learnt about Object Wrapping and how we can wrap a `SuiFren` object into a `GiftBox`:\n```\nstruct GiftBox has key {\n    id: UID,\n    inner: SuiFren,\n}\n\nentry fun wrap_fren(fren: SuiFren, ctx: &mut TxContext) {\n    let gift_box = GiftBox {\n        id: object::new(ctx),\n        inner: fren,\n    };\n    transfer::transfer(gift_box, tx_context::sender(ctx));\n}\n```\nThere's an alternative to object wrapping that has a similar syntax - using a non-object struct that only has the store ability:\n```\nstruct SuiFren has store {\n    generation: u64,\n    birthdate: u64,\n    attributes: vector<String>,\n}\n```\nThis approach is usually useful only if the developer doesn't plan to turn the nested struct type into an object. This can help break a long object struct into smaller related components, for example:\n```\nstruct LongObject has key {\n    id: UID,\n    field_1: u64,\n    field_2: u64,\n    field_3: u64,\n    field_4: u64,\n    field_5: u64,\n    field_6: u64,\n    field_7: u64,\n    field_8: u64,\n}\n```\nvs\n```\nstruct BigObject has key {\n    id: UID,\n    field_group_1: FieldGroup1,\n    field_group_2: FieldGroup2,\n    field_group_3: FieldGroup3,\n}\n\nstruct FieldGroup1 has store {\n    field_1: u64,\n    field_2: u64,\n    field_3: u64,\n}\n\nstruct FieldGroup2 has store {\n    field_4: u64,\n    field_5: u64,\n    field_6: u64,\n}\n\nstruct FieldGroup3 has store {\n    field_7: u64,\n    field_8: u64,\n\n}\n```\n\n"
}
