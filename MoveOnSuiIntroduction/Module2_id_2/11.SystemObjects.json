{
  "codeSol": "module 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::TxContext;\n    use std::string::String;\n    use std::vector;\n    use sui::event;\n\n    friend 0x123::fren_summer;\n    \n    struct SuiFren has key, store {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n\n    struct SUI_FREN has drop {}\n\n    fun init(witness: SUI_FREN, ctx: &mut TxContext) {\n        assert!(types::is_one_time_witness(&witness), ENotOneTimeWitness);\n        let publisher_object = package::claim(witness, ctx);\n        transfer::public_transfer(publisher_object, tx_context::sender(ctx));\n    }\n\n    public fun create_display_object(publisher: &Publisher, ctx: &mut TxContext) {\n        let display_object = display::new<SuiFren>(&publisher, ctx);\n        display::add_multiple(\n            &mut display_object,\n            vector[\n                utf8(b\"id\"),\n                utf8(b\"generation\"),\n                utf8(b\"birthdate\"),\n                utf8(b\"attributes\"),\n            ],\n            vector[\n                utf8(b\"id: {id}\"),\n                utf8(b\"generation: {generation}\"),\n                utf8(b\"birthdate: {birthdate}\"),\n                utf8(b\"all attributes: {attributes}\"),\n            ],\n        );\n        display::update_version(&mut display_object);\n        transfer::public_transfer(display_object, tx_context::sender(ctx));\n    }\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "11",
  "codeDef": "module 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::TxContext;\n    use std::string::String;\n    use std::vector;\n    use sui::event;\n\n    friend 0x123::fren_summer;\n    \n    struct SuiFren has key, store {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n\n    struct SUI_FREN has drop {}\n\n    fun init(witness: SUI_FREN, ctx: &mut TxContext) {\n        assert!(types::is_one_time_witness(&witness), ENotOneTimeWitness);\n        let publisher_object = package::claim(witness, ctx);\n        transfer::public_transfer(publisher_object, tx_context::sender(ctx));\n    }\n\n    // Add the new function here\n}",
  "title": "System Objects: Display Objects",
  "quizTitle": "Add a new public function add_display that creates a display object for a SuiFren with the following formatting rules:\n1. `id` will be formatted as `id: {id}`\n2. `generation` will be formatted as `generation: {generation}`\n3. `birthdate` will be formatted as `birthdate: {birthdate}`\n4. `all attributes` will be formatted as `all attributes: {attributes}`\nThe display object should be sent to the sender.",
  "content": [
    "Display `Objects (Display<T>)` are objects that indicate how fields can be displayed for an object of a specific type.\n",
    "```\n",
    "struct Display<phantom T: key> has key, store {\n",
    "    id: UID,\n",
    "    /// Contains fields for display. Currently supported\n",
    "    /// fields are: name, link, image and description.\n",
    "    fields: VecMap<String, String>,\n",
    "    /// Version that can only be updated manually by the Publisher.\n",
    "    version: u16\n",
    "}\n",
    "```\n",
    "\n",
    "If an account holds both MyObject and Display<MyObject>, a web UI can look at the fields in Display<MyObject> to know how to format and display the fields of MyObject.\n",
    "```\n",
    "module 0x123::my_module {\n",
    "    struct MyObject has key {\n",
    "        id: UID,\n",
    "        num_value: u64,\n",
    "        string_value: String,\n",
    "    }\n",
    "    \n",
    "    public fun create_display_object(publisher: &Publisher, ctx: &mut TxContext) {\n",
    "        let display_object = display::new<MyObject>(&publisher, ctx);\n",
    "        display::add_multiple(\n",
    "            &mut display,\n",
    "            vector[\n",
    "                utf8(b\"num_value\"),\n",
    "                utf8(b\"string_value\"),\n",
    "            ],\n",
    "            vector[\n",
    "                utf8(b\"Value: {num_value}\"),\n",
    "                utf8(b\"Description: {string_value}\"),\n",
    "            ],\n",
    "        );\n",
    "        display::update_version(&mut display);\n",
    "    }\n",
    "}\n",
    "```\n",
    "\n",
    "In order to create the display object, we need a reference to the publisher object for the module where `MyObject` is deployed at. Assuming we have created this object (see previous lesson) and store it in an account we control, we can use this account to call `create_display_object`. After the display object is created, we can add formatting rules by calling `display::add_multiple` with two vectors, one for the list of fields from `MyObject` to display and one for the formatting rules.\n",
    "\n",
    "After the formatting rules have been set, we can call `display::update_version` to finalize the updates to the display object. Once the display object is created, an event is emitted that allows the Sui network nodes to detect the Display object. Subsequently, whenever an object is fetched via the node API, its display attributes are also computed in the exact formatting specified and returned along with the rest of the object's fields.\n"
  ]
}
