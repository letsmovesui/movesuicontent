{
  "codeSol": "module 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::TxContext;\n    use std::string::String;\n    use std::vector;\n    use sui::event;\n    use sui::package;\n    use sui::types;\n\n    friend 0x123::fren_summer;\n    \n    struct SuiFren has key, store {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n\n    struct SUI_FREN has drop {}\n\n    fun init(witness: SUI_FREN, ctx: &mut TxContext) {\n        assert!(types::is_one_time_witness(&witness), ENotOneTimeWitness);\n        let publisher_object = package::claim(witness, ctx);\n        transfer::public_transfer(publisher_object, tx_context::sender(ctx));\n    }\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "10",
  "codeDef": "module 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use sui::transfer;\n    use sui::tx_context::TxContext;\n    use std::string::String;\n    use std::vector;\n    use sui::event;\n\n    friend 0x123::fren_summer;\n    \n    struct SuiFren has key, store {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n\n    // Add the witness struct here\n\n    // Add the init function here\n}",
  "title": "System Objects: One-time Witness Object and Publisher Object",
  "quizTitle": "Add a witness struct to the `sui_fren` module and an init function that:\n1. Takes the witness object as argument and creates a publisher object\n2. Transfers the publisher struct to the sender (same as the deploying account). Note that you would need to use the right transfer function (which one between `transfer` and `public_transfer`?)",
  "content": "We have seen the `TxContext` object, which can be passed as mutable or immutable reference. Let's discuss other special objects.\n\nWhen deploying a module, any init function would be called automatically. The init function can also be given a witness object - a special system object that is only created once the first time the module is deployed:\n```\nmodule 0x123::my_module {\n    struct MY_MODULE has drop {}\n    \n    fun init(witness: MY_MODULE) {\n        // Do something with the witness object.\n    }\n}\n```\nIn order to receive the witness object in the init function, you need to declare a struct with the same name as the module but in all uppercase (any _ is kept). This struct must have the drop ability. Now, when you define the init function you can add the witness object of that type as the first argument.\n\nWitness objects currently only have two main cases but more can be added by the Sui team in the near future:\n1. Claim the `Publisher Object`. `Publisher Object` is a proof that the keeper has deployed the object.\n```\nfun init(witness: MY_MODULE, ctx: &mut TxContext) {\n    assert!(types::is_one_time_witness(&witness), ENotOneTimeWitness);\n    let publisher_object = package::claim(witness, ctx);\n    // Use or store the publisher object...\n}\n```\n2. Proof when calling other modules' functions that this is in the middle of the initialization flow. This is usually useful when there's a set of actions that have to be done with multiple different modules as part of initializing the project.\n```\nmodule 0x123::module_b {\n    fun init(module_a_witness: MODULE_A, ctx: &mut TxContext) {\n        assert!(types::is_one_time_witness(&module_a_witness), ENotOneTimeWitness);\n        // We know that this is being called from module A's init function.\n    }\n}\n```\nPublisher objects also only have 2 use cases currently but more can be added soon:\n1. Create Display Objects. More on these in the next lesson\n2. Set transfer policy in Sui's Kiosk (NFT standard). This will be covered in the NFT course."
}
