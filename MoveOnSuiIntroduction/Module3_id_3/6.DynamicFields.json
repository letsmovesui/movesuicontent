{
  "codeSol": "module 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use std::string::String;\n    use sui::dynamic_field;\n    use sui::dynamic_object_field;\n    \n    struct SuiFren has key, store {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n\n    const HAT_KEY: vector<u8> = b\"HAT\";\n\n    struct Hat has key, store {\n        id: UID,\n        color: String,\n    }\n\n    const EXTENSION_1: u64 = 1;\n\n    struct HatExtension1 has store {\n        description: String,\n        duration: u64,\n    }\n\n    public fun extend_hat(sui_fren: &mut SuiFren, description: String, duration: u64) {\n        if (dynamic_object_field::exists_(&sui_fren.id, string::utf8(HAT_KEY))) {\n            let hat: &mut Hat = dynamic_object_field::borrow_mut(sui_fren, string::utf8(HAT_KEY));\n            dynamic_field::add(&mut hat.id, EXTENSION_1, HatExtension1 {\n                description,\n                duration,\n            });\n        };\n    }\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "6",
  "codeDef": "module 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use std::string::String;\n    use sui::dynamic_field;\n    use sui::dynamic_object_field;\n    \n    struct SuiFren has key, store {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n\n    const HAT_KEY: vector<u8> = b\"HAT\";\n\n    struct Hat has key, store {\n        id: UID,\n        color: String,\n    }\n\n    // Add the new struct here\n\n    // Add the new function here\n}",
  "title": "Dynamic Fields for Extensibility and Upgradability",
  "quizTitle": "We want to ExtendHat to also add a description field of type String and duration of type u64.\n1. Add a new struct for the extension, named HatExtension1\n2. Add a new public function extend_hat that takes a SuiFren, a description, a duration and extend the SuiFren's hat if it exists",
  "content": [
    "In earlier lessons on Dynamic Fields and Dynamic Object Fields, we have discussed adding new fields dynamically to an existing object. This is a powerful ability that can be used to extend an existing object especially when upgrading an existing Move module.\n",
    "\n",
    "What is upgrading? When a Move module is deployed to the Sui blockchain, its package is assigned an address as discussed in the first course. If we want to add more code and overriding the code at the address we deployed to, we'd need to upgrade the code instead. Upgrading, however, is subject to specific rules depending on which compatibility policy was specified when you deploy the code the first time:\n",
    "\n",
    "[Compatibility Policies and Rules from Sui's official documentation](https://docs.sui.io/concepts/sui-move-concepts/packages/custom-policies)\n",
    "1. Immutable\tNo one can upgrade the package.\n",
    "2. Dependency-only\tYou can modify the dependencies of the package only.\n",
    "3. Additive\tYou can add new functionality to the package (e.g., new public functions or structs) but you can't change any of the existing functionality (e.g., the code in existing public functions cannot change).\n",
    "4. Compatible\tThe most relaxed policy. In addition to what the more restrictive policies allow, in an upgraded version of the package:\n",
    "- You can change all function implementations.\n",
    "- You can remove the ability constraints on generic type parameters in function signatures.\n",
    "- You can change, remove, or make public any private, public(friend), and entry function signatures.\n",
    "- You cannot change public function signatures (except in the case of ability constraints mentioned previously).\n",
    "- You cannot change existing types (structs).\n",
    "\n",
    "As you can see, when upgrading existing code, you cannot change any existing structs! This means if you cannot add new fields or change the names of existing fields. Dynamic fields are the only way you can dynamically extend existing objects/structs so you just need to add new functions or update existing functions to do this.\n",
    "\n",
    "As discussed in a previous lesson, it's generally not recommended to add more than 10 dynamic fields as they can be scattered throughout the code and hard to find. There's a good way to fix this and still be able to easily extend existing objects - Group the newly added fields into a single struct:\n",
    "```\n",
    "use sui::dynamic_field;\n",
    "\n",
    "struct Laptop has key {\n",
    "    id: Id,\n",
    "}\n",
    "\n",
    "const EXTENSION_1: u64 = 1;\n",
    "\n",
    "struct PurchaseDetails has store {\n",
    "    customer_name: String,\n",
    "    street_address: String,\n",
    "    price: u64,\n",
    "}\n",
    "\n",
    "public fun add_purchase_details(laptop: &mut Laptop, customer_name: String, street_address: String, price: u64) {\n",
    "    dynamic_field::add(&mut laptop.id, EXTENSION_1, PurchaseDetails {\n",
    "        customer_name,\n",
    "        street_address,\n",
    "        price,\n",
    "    });\n",
    "}\n",
    "```\n",
    "\n",
    "We're extending an existing Laptop struct with PurchaseDetails with 3 new fields. This means we only need to add a single new dynamic field. Note that:\n",
    "1. PurchaseDetails is not an object. We don't intend it to ever live separately outside of Laptop so it doesn't make sense to make it an object.\n",
    "2. We use the extension number as the key. This will increment if we need to extend the Laptop object multiple times. You can also use a string or other types if desired.\n",
    "\n",
    "We can also use the same pattern to augment an object that has been added as a dynamic object field on another object as well:\n",
    "```\n",
    "use sui::dynamic_object_field;\n",
    "use sui::dynamic_field;\n",
    "\n",
    "struct Laptop has key {\n",
    "    id: Id,\n",
    "}\n",
    "\n",
    "struct Sticker has key, store {\n",
    "    id: Id,\n",
    "}\n",
    "\n",
    "const EXTENSION_1: u64 = 1;\n",
    "\n",
    "struct StickerPurchaseDetails has store {\n",
    "    customer_name: String,\n",
    "    street_address: String,\n",
    "    price: u64,\n",
    "}\n",
    "\n",
    "public fun add_sticker_purchase_details(laptop: &mut Laptop, sticker_name: String, customer_name: String, street_address: String, price: u64) {\n",
    "    let sticker: &mut Sticker = dynamic_object_field::borrow_mut(laptop, sticker_name);\n",
    "    dynamic_field::add(&mut sticker.id, EXTENSION_1, StickerPurchaseDetails {\n",
    "        customer_name,\n",
    "        street_address,\n",
    "        price,\n",
    "    });\n",
    "}\n",
    "```\n"
  ]
}
