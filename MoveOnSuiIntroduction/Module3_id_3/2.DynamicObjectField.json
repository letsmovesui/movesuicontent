{
  "codeSol": "module 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use std::string::String;\n    use sui::dynamic_object_field;\n    \n    struct SuiFren has key, store {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n\n    struct Hat has key, store {\n        id: UID,\n        color: String,\n    }\n\n    public fun color_hat(sui_fren: &mut SuiFren, color: String, ctx: &mut TxContext) {\n        if (dynamic_object_field::exists_(&sui_fren.id, string::utf8(HAT_KEY))) {\n            let hat: &mut Hat = dynamic_object_field::borrow_mut(&mut sui_fren.id, string::utf8(HAT_KEY));\n            hat.color = color;\n        } else {\n            let hat = Hat {\n                id: object::new(ctx),\n                color,\n            };\n            dynamic_object_field::add(&mut sui_fren.id, string::utf8(HAT_KEY), hat);\n        }\n    }\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "2",
  "codeDef": "module 0x123::sui_fren {\n    use sui::object::{Self, UID};\n    use std::string::String;\n    use sui::dynamic_object_field;\n    \n    struct SuiFren has key, store {\n        id: UID,\n        generation: u64,\n        birthdate: u64,\n        attributes: vector<String>,\n    }\n\n    // Update\n    struct Hat has store {\n        color: String,\n    }\n\n    // Update\n    public fun color_hat(sui_fren: &mut SuiFren, color: String) {\n        if (dynamic_field::exists_(&sui_fren.id, string::utf8(HAT_KEY))) {\n            let hat: &mut Hat = dynamic_field::borrow_mut(&mut sui_fren.id, string::utf8(HAT_KEY));\n            hat.color = color;\n        } else {\n            dynamic_field::add(&mut sui_fren.id, string::utf8(HAT_KEY), Hat { color });\n        }\n    }\n}",
  "title": "Dynamic Object Field - Store objects as dynamic field",
  "quizTitle": "1. Update Hat to be an object\n2. Use dynamic object field to add that Hat instead. Remember you'd need to add a transaction context param to the color_hat function to be able to create Hat objects.",
  "content": [
    "You must have a question about dynamic fields - what if we store an object in a dynamic field. While this is possible, one side effect of storing a Sticker object as a dynamic field on a Laptop is the Sticker object will be removed from storage and cannot be looked up by its id off-chain (for example in a web UI). This is the same side effect we saw with object wrapping.\n",
    "```\n",
    "struct Sticker has key, store {\n",
    "    id: UID,\n",
    "    image_url: String,\n",
    "}\n",
    "\n",
    "public fun add_sticker(laptop: &mut Laptop, name: String, sticker: Sticker) {\n",
    "    dynamic_field::add(&mut laptop.id, name, sticker);\n",
    "}\n",
    "```\n",
    "Note that the Sticker object must also have the store ability to be stored in a dynamic fields. Because Sticker is now an object, we also need to explicit pass it via a transaction. If it's an owned object, only the owner can do so (ownership rule).\n",
    "\n",
    "If you don't want the Sticker object to be removed from global storage so your web UI can still look it up, you can use the dynamic_object_field module instead of dynamic_field. These two modules and their functions look pretty much the same inside Move - the difference regarding global storage only matters for off chain components such as the web UI.\n",
    "```\n",
    "use sui::dynamic_object_field;\n",
    "\n",
    "struct Sticker has key, store {\n",
    "    id: UID,\n",
    "    image_url: String,\n",
    "}\n",
    "\n",
    "public fun add_sticker(laptop: &mut Laptop, name: String, sticker: Sticker) {\n",
    "    dynamic_object_field::add(&mut laptop.id, name, sticker);\n",
    "}\n",
    "```\n",
    "In general, dynamic object fields are preferred over dynamic fields to store objects dynamically. You should only use dynamic fields if you intentionally want to remove the objects from global storage. One example could be when you put a hat on your SuiFren, you want the Hat to be gone from global storage to indicate it has been claimed.\n",
    "\n",
    "Bonus: You might be curious about what happens to the ownership of an object after it has been added as a dynamic field on another object. The answer is that it'd be owned by the <b>dynamic field<b> itself! Behind the scene, when dynamic fields are added, each field is secretly created as a separate object in the global storage tied to the parent object the field is defined on. This dynamic field object would own the object added to it. In the example above, the Laptop owns the sticker dynamic field and the sticker dynamic field owns the Sticker object. Confusing right? Most developers don't really need to know this :)"
  ]
}
