{
  "codeSol": "module 0x123::fren_summer {\n    use sui::object::{Self, UID};\n    use 0x123::sui_fren::{Self, SuiFren};\n    use sui::tx_context;\n    use sui::object_table::{Self, ObjectTable};\n\n    struct GiftBox has key {\n        id: UID,\n        sui_frens: ObjectTable<u64, SuiFren>,\n        hats: ObjectTable<u64, Hat>,\n    }\n\n    entry fun wrap_fren(fren: SuiFren, ctx: &mut TxContext) {\n        let gift_box = GiftBox {\n            id: object::new(ctx),\n            sui_frens: object_table::new(ctx),\n            hats: object_table::new(ctx),\n        };\n        let index = object_table::length(&gift_box.sui_frens);\n        object_table::add(&mut gift_box.sui_frens, index, fren);\n    }\n\n    entry fun wrap_hat(gift_box: &mut GiftBox, hat: Hat) {\n        let index = object_table::length(&gift_box.hats);\n        object_table::add(&mut gift_box.hats, index, hat);\n    }\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "8",
  "codeDef": "module 0x123::fren_summer {\n    use sui::object::{Self, UID};\n    use 0x123::sui_fren::{Self, SuiFren};\n    use sui::tx_context;\n    use sui::object_table::{Self, ObjectTable};\n\n    // Update\n    struct GiftBox has key {\n        id: UID,\n        object_bag: ObjectBag,\n    }\n\n    entry fun wrap_fren(fren: SuiFren, ctx: &mut TxContext) {\n        let gift_box = GiftBox {\n            id: object::new(ctx),\n            object_bag: object_bag::new(ctx),\n        };\n        let index = object_bag::length(&gift_box.object_bag);\n        object_bag::add(&mut gift_box.object_bag, index, fren);\n    }\n\n    entry fun wrap_hat(gift_box: &mut GiftBox, hat: Hat) {\n        let index = object_bag::length(&gift_box.object_bag);\n        object_bag::add(&mut gift_box.object_bag, index, hat);\n    }\n}",
  "title": "Object Data Structures - ObjectTable",
  "quizTitle": "Using ObjectBag is still better, but just for the sake of practice:\n1. Replace ObjectBag in GiftBox with two separate ObjectTables, one for SuiFrens and one for Hats. The keys are string u64 (index).\n2. Update all functions to work with ObjectTables",
  "content": [
    "Another cool data structure you can use to store objects is ObjectTable. This is different from ObjectBag and only allows a single type of objects. Although ObjectTable is more limited, it can be still be useful when user wants to assign specific key name for the different objects of the same type in the table.\n",
    "```\n",
    "use sui::object_table::{Self, ObjectTable};\n",
    "\n",
    "struct MyObject has key, store {\n",
    "    id: UID,\n",
    "}\n",
    "\n",
    "struct MyTable has key {\n",
    "    id: UID,\n",
    "    table: ObjectTable<String, MyObject>,\n",
    "}\n",
    "\n",
    "public fun create_table(ctx: &mut TxContext) {\n",
    "    transfer::transfer(MyTable {\n",
    "        id: object::new(ctx),\n",
    "        table: object_table::new(ctx),\n",
    "    }, tx_context::sender(ctx));\n",
    "}\n",
    "\n",
    "public fun add_to_table(my_bag: &mut MyBag, key: String, object: MyObject) {\n",
    "    object_table::add(&mut my_bag.object_bag, key, object);\n",
    "}\n",
    "```\n",
    "\n",
    "Under the hood, ObjectTable also uses dynamic object fields, similar to ObjectBag. When defining the object table field, we also need the exact types for the key and value.\n",
    "\n",
    "ObjectTable also offers the same functions as ObjectHat: add, contains, remove, borrow, borrow_mut, length, and is_empty."
  ]
}
