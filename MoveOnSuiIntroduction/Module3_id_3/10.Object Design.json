{
  "codeSol": "",
  "quizType": "ANSWERS",
  "answers": [
    {
      "answer": "A. Dynamic Fields and Objects owning Objects",
      "isCorrect": false
    },
    {
      "answer": "B. Objects owning Objects and Objects data structures",
      "isCorrect": false
    },
    {
      "answer": "C. Objects data structures and Dynamic Fields",
      "isCorrect": true
    }
  ],
  "lessonId": "10",
  "codeDef": "",
  "title": "Object Design Pitfall: Too Many Objects",
  "quizTitle": "What are some good approaches to reduce the number of objects an application creates?",
  "content": "Similar to what was discussed earlier regarding too many contract state objects, a common pitfall that some developers run into is to create too many objects. For example, in the case of a Laptop, you can technically create a separate object for each Laptop component such as screen, keyboard, hard drive, etc.:\n\n```\nstruct Laptop has key {\n    id: UID,\n    screen: Screen,\n    keyboard: Keyboard,\n    hard_drive: HardDrive,\n}\n\nstruct Screen has key, store {\n    id: UID,\n}\n\nstruct Keyboard has key, store {\n    id: UID,\n}\n\nstruct HardDrive has key, store {\n    id: UID,\n}\n```\nAs you can see, every component is a separate object. This is not necessary as Screen, Keyboard, and HardDrive objects are always wrapped into the Laptop object. They are never separated out into standalone objects. This kind of design only makes sense if we intentionally want to sell Keyboard as a separate component that can be integrated into another Laptop. This could be desired if we're running a hardware store, but this is a laptop store only.\n\nSome other issues with a Move module creating too many objects:\n1. It's hard to understand a transaction if it creates and changes too many objects. To users who view these transactions on an explorer UI, all they see is a very long list of all objects that are updated or have been created, and all of their associated fields/data. This can be overwhelming if the list has 10+ objects.\n2. If users need to interact with multiple of these objects, it can make the transaction complex to construct as the UIs would then need to find and pass the addresses for all of the objects involved.\n\nBeside using dynamic fields similar to what we covered in the lesson on managing state objects, developers can also use data structures such as ObjectBag and ObjectTable as covered earlier to store multiple objects if they really want to create many different types of objects. These can collect many objects into a single container object that can be easily understood and passed around."
}
