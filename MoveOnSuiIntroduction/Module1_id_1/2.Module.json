{
  "codeSol": "module 0x123::sui_fren {\r\n}\r\n",
  "quizType": "CODING",
  "answers": [],
  "lessonId": 2,
  "codeDef": "// Create the fren_group module here",
  "title": "Module",
  "quizTitle": "Write a module with the address as `0x123` and the module's name as `sui_fren`",
  "content": "Move code is organized into Modules. Each module roughly corresponds to a single smart contract on other blockchains. Move, however, offers a lot more functionalities that make organizing code into smaller and more modular pieces easier.\nEach module offers an API through its entry and public functions. Users can interact with the modules by calling functions from these modules via transactions or via other Move code. Transactions are sent to and processed by the Sui blockchain and once executed, the resulting changes will be saved. This tech stack resembles the Web 2 stack where Move modules act as the server with different routes/APIs, the Sui blockchain acting as the framework to run the server and provides the database for storing data. Developers can then build a UI that connects to this server and database to provide rich functionalities to their users.\n```\nmodule 0x996c4d9480708fb8b92aa7acf819fb0497b5ec8e65ba06601cae2fb6db3312c3::pool_script {\n\n\n}\n```\nDevelopers often deploy modules together as a single package, which gets assigned to an object and has its own address such as `0x996c4d9480708fb8b92aa7acf819fb0497b5ec8e65ba06601cae2fb6db3312c3`. The module can then be referred to with the object address and its name: `0x996c4d9480708fb8b92aa7acf819fb0497b5ec8e65ba06601cae2fb6db3312c3::pool_script`. In this case the module's name is pool_script. Move also allows using an alias for the address by defining it in Move.toml (e.g. cetus=`0x996c4d9480708fb8b92aa7acf819fb0497b5ec8e65ba06601cae2fb6db3312c3` and then defining the module as `cetus::pool_script`).\nWhen calling a function on this module, users can send a transaction content that invokes `0x996c4d9480708fb8b92aa7acf819fb0497b5ec8e65ba06601cae2fb6db3312c3::pool_script::open_position` where `open_position` is the function's name. This standard format of module and function identifiers makes it easy for applications to deploy, manage, and integrate with Move modules.\nModular design is strongly encouraged on Sui and developers should keep each module as small as possible and in its separate file. This keeps the data structure and code clean, while making it easier for applications to integrate with the modules and for users to more easily understand each transaction that they send. This is similar to principles from Web 2 development such as the Single Responsibility Principle (SRP).\n"
}
