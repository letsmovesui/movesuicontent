{
  "codeSol": "module 0x123::sui_fren {\r\n    use sui::object::{Self, UID};\r\n    use sui::transfer;\r\n    use sui::tx_context::TxContext;\r\n    use std::string::String;\r\n    use std::vector;\r\n    use sui::event;\r\n    \r\n    struct SuiFren has key {\r\n        id: UID,\r\n        generation: u64,\r\n        birthdate: u64,\r\n        attributes: vector<String>,\r\n    }\r\n\r\n    struct MintEvent has copy, drop {\r\n        id: ID,\r\n    }\r\n\r\n    struct BurnEvent has copy, drop {\r\n        id: ID,\r\n    }\r\n\r\n    public fun mint(generation: u64, birthdate: u64, attributes: vector<String>, ctx: &mut TxContext) {\r\n        let uid = object::new(ctx);\r\n        let id = object::uid_to_inner(&uid);\r\n        let sui_fren = SuiFren {\r\n            id: uid,\r\n            generation,\r\n            birthdate,\r\n            attributes,\r\n        };\r\n        transfer::transfer(sui_fren, tx_context::sender(ctx));\r\n        event::emit(MintEvent {\r\n            id,\r\n        });\r\n    }\r\n\r\n    public fun burn(sui_fren: SuiFren) {\r\n        let SuiFren {\r\n            id,\r\n            generation: _,\r\n            birthdate: _,\r\n            attributes: _,\r\n        } = sui_fren;\r\n        object::delete(id);\r\n        event::emit(BurnEvent {\r\n            id: object::uid_to_inner(&id),\r\n        });\r\n    }\r\n}\r\n",
  "quizType": "CODING",
  "answers": [],
  "lessonId": 13,
  "codeDef": "module 0x123::sui_fren {\r\n    use sui::object::{Self, UID};\r\n    use sui::transfer;\r\n    use sui::tx_context::TxContext;\r\n    use std::string::String;\r\n    use std::vector;\r\n    \r\n    struct SuiFren has key {\r\n        id: UID,\r\n        generation: u64,\r\n        birthdate: u64,\r\n        attributes: vector<String>,\r\n    }\r\n\r\n    // Define the new events here\r\n\r\n    public fun mint(generation: u64, birthdate: u64, attributes: vector<String>, ctx: &mut TxContext) {\r\n        let sui_fren = SuiFren {\r\n            id: object::new(ctx),\r\n            generation,\r\n            birthdate,\r\n            attributes,\r\n        };\r\n        transfer::transfer(sui_fren, tx_context::sender(ctx));\r\n    }\r\n\r\n    public fun burn(sui_fren: SuiFren) {\r\n        let SuiFren {\r\n            id,\r\n            generation: _,\r\n            birthdate: _,\r\n            attributes: _,\r\n        } = sui_fren;\r\n        object::delete(id);\r\n        // Emit event here\r\n    }\r\n}\r\n",
  "title": "Events",
  "quizTitle": "Emit two events:\n1. `MintEvent` which has the id of the newly minted `SuiFren` object.\n2. `BurnEvent` which has the id of the `SuiFren` being deleted. Hint: Don't forget imports!",
  "content": [
    "Our module is almost finished! Now let's add events. Wait, but what are events? Event is a way for your module to communicate that something happened on the blockchain to your app front-end, which can be 'listening' for certain events and take action when they happen. Without events, it's much harder for an \"off-chain\" component (smart contracts are considered \"on-chain\") to monitor whether tickets are created, extended, or redeemed. They would need to query the results for each transaction and manually go through the results to see what objects are changed and how exactly they changed. This is not easy at all and events can help!\n",
    "Example:\n",
    "```\n",
    "module 0x123::ticket_module {\n",
    "  use sui::clock::{Self, Clock};\n",
    "  use sui::event;\n",
    "  use sui::object::{Self, ID, UID};\n",
    "  use sui::transfer;\n",
    "  use sui::tx_context::{Self, TxContext};\n",
    " \n",
    "  struct Ticket has key {\n",
    "      id: UID,\n",
    "      expiration_time: u64,\n",
    "  }\n",
    " \n",
    "  struct CreateTicketEvent has copy, drop {\n",
    "     id: ID,\n",
    "  }\n",
    " \n",
    "  struct ClipTicketEvent has copy, drop {\n",
    "     id: ID,\n",
    "  }\n",
    " \n",
    "   public fun create_ticket(ctx: &mut TxContext, clock: &Clock) {\n",
    "     let uid = object::new(ctx);\n",
    "     let id = object::uid_to_inner(&uid);\n",
    "     let ticket = Ticket {\n",
    "           id: uid,\n",
    "           expiration_time: clock::timestamp_ms(clock),\n",
    "     };\n",
    "     transfer::transfer(ticket, tx_context::sender(ctx));\n",
    "     event::emit(CreateTicketEvent {\n",
    "         id,\n",
    "     });\n",
    "   }\n",
    " \n",
    "  public fun clip_ticket(ticket: Ticket) {\n",
    "     let Ticket { id, expiration_time: _ } = ticket;\n",
    "     object::delete(id);\n",
    "     event::emit(ClipTicketEvent {\n",
    "        id: object::uid_to_inner(&id),\n",
    "     });\n",
    "  }\n",
    "}\n",
    "```\n",
    "In order to emit an event on Sui, you just need to do two things:\n",
    "1. Define the event struct like `ClipTicketEvent`.\n",
    "2. Call `event::emit` to emit the event defined in (1) Note that if we want to include the object id (essentially an address) in the event, we need to use `object::uid_to_inner` to convert the original UID type to an ID type yet. UID cannot be copied or stored."
  ]
}
