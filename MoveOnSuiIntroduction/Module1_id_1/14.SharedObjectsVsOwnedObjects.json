{
  "codeSol": "",
  "quizType": "ANSWERS",
  "answers": [
    {
      "answer": "A. Owned objects need to go through consensus before transactions using them are finalized.",
      "isCorrect": false
    },
    {
      "answer": "B. Shared objects can be converted into owned objects but not the opposite.",
      "isCorrect": false
    },
    {
      "answer": "C. Owned objects can shared when they're created. Shared objects cannot be converted to owned objects.",
      "isCorrect": true
    }
  ],
  "lessonId": 14,
  "codeDef": "",
  "title": "Shared Objects vs Owned Objects",
  "quizTitle": "What's the difference between Shared objects and Owned objects?",
  "content": [
    "In previous lessons, we got familiar with Shared and Owned Objects:\n",
    "```\n",
    "struct SharedObject has key {\n",
    "   id: UID,\n",
    "}\n",
    "\n",
    "struct OwnedObject has key {\n",
    "   id: UID,\n",
    "}\n",
    "\n",
    "public fun create_shared_object(ctx: &mut TxContext) {\n",
    " let shared_object = SharedObject {\n",
    "     id: object::new(ctx),\n",
    " };\n",
    " transfer::share_object(shared_object);\n",
    "}\n",
    "\n",
    "public fun create_owned_object(ctx: &mut TxContext) {\n",
    " let owned_object = OwnedObject {\n",
    "     id: object::new(ctx),\n",
    " };\n",
    " transfer::transfer(owned_object, tx_context::sender(ctx));\n",
    "}\n",
    "```\n",
    "A key benefit of using Owned Objects is that they can be processed in parallel as transactions touching them don’t overlap with one another (they don’t read or modify the same data). Shared objects, however, cannot be processed in parallel if they’re modified and would need to go through a more rigorous execution process, which is slower and less scalable.\n",
    "Another important thing to note with Shared Objects is that they can only be shared in the same transaction where they’re created. This would not work:\n",
    "```\n",
    "struct SharedObject has key {\n",
    "   id: UID,\n",
    "}\n",
    "\n",
    "public fun create_object(tx_context: &mut TxContext) {\n",
    " let object = SharedObject {\n",
    "     id: object::new(ctx),\n",
    " };\n",
    " transfer::transfer(object, tx_context::sender(ctx));\n",
    "}\n",
    "\n",
    "public fun share_object(object: SharedObject) {\n",
    " transfer::share_object(object);\n",
    "}\n",
    "```\n",
    "If we call `create_object` which creates an initially owned object and then later try to share it with `share_object` in a second transaction, this would fail!"
  ]
}
