{
  "codeSol": "module 0x123::sui_fren {\r\n    use sui::object::{Self, UID};\r\n    use sui::transfer;\r\n    use sui::tx_context::TxContext;\r\n    use std::string::String;\r\n    use std::vector;\r\n    \r\n    struct AdminCap has key {\r\n        id: UID,\r\n        num_frens: u64,\r\n    }\r\n    \r\n    // Add the new SuiFren struct here\r\n    struct SuiFren has key {\r\n        id: UID,\r\n        generation: u64,\r\n        birthdate: u64,\r\n        attributes: vector<String>,\r\n    }\r\n}\r\n",
  "quizType": "CODING",
  "answers": [],
  "lessonId": 8,
  "codeDef": "module 0x123::sui_fren {\r\n    use sui::object::{Self, UID};\r\n    use sui::transfer;\r\n    use sui::tx_context::TxContext;\r\n    use std::string::String;\r\n    \r\n    struct AdminCap has key {\r\n        id: UID,\r\n        num_frens: u64,\r\n    }\r\n    \r\n    // Add the new SuiFren struct here\r\n}\r\n",
  "title": "Vectors",
  "quizTitle": "Define a new `SuiFren` object struct that has the following fields: generation of type `u64`, birthdate of type `u64`, and attributes as a `vector` of strings. Don't forget to add an import statement for `vector`.",
  "content": [
    "When you want a list of values, use vectors. A vector in Move is dynamic by default and doesn't have a fixed size. It can grow and shrink as needed. Vector in Sui is imported by default and doesn't need to be explicitly added. You just need to do `use std::vector` at the top of your module to be able to access it. Weâ€™ll talk about other data structures and libraries available for use in a later course. Example:\n",
    "```\n",
    "module 0x123::my_module {\n",
    "   use std::vector;\n",
    "   use sui::object::{Self, UID};\n",
    "\n",
    "\n",
    "   struct MyObject has key {\n",
    "       id: UID,\n",
    "       values: vector<u64>,\n",
    "       bool_values: vector<bool>,\n",
    "       address_values: vector<address>,\n",
    "   }\n",
    "}\n",
    "```\n",
    "You can also store Objects in vectors by referencing the structs. Note that for an object to be stored in another object's field, its struct needs the store ability:\n",
    "\n",
    "```\n",
    "module 0x123::my_module {\n",
    "   use std::vector;\n",
    "   use sui::object::{Self, UID};\n",
    "\n",
    "\n",
    "   struct NestedObject has key, store {\n",
    "       id: UID,\n",
    "       owner: address,\n",
    "       balance: u64,\n",
    "   }\n",
    "\n",
    "\n",
    "   struct GlobalData has key {\n",
    "       id: UID,\n",
    "       wrapped_objects: vector<NestedObject>,\n",
    "   }\n",
    "}\n",
    "```\n",
    "\n",
    "When creating an empty vector you can use the following syntax:\n",
    "```\n",
    "fun init() {\n",
    "   // The empty vector does not yet have a type declared. The first value added will determine its type.\n",
    "   let empty_vector = vector[];\n",
    "   let int_vector = vector[1, 2, 3];\n",
    "   let bool_vector = vector[true, true, false];\n",
    "}\n",
    "```"
  ]
}
