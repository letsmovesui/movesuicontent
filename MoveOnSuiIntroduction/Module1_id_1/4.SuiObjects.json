{
  "codeSol": "module 0x123::sui_fren {\r\n    use sui::object::{Self, UID};\r\n    use sui::transfer;\r\n    use sui::tx_context::TxContext;\r\n\r\n    struct AdminCap has key {\r\n        id: UID,\r\n        num_frens: u64,\r\n    }\r\n    \r\n    fun init(ctx: &mut TxContext) {\r\n        let admin_cap = AdminCap {\r\n            id: object::new(ctx),\r\n            num_frens: 1000,\r\n        };\r\n        transfer::share_object(admin_cap);\r\n    }\r\n}\r\n",
  "quizType": "CODING",
  "answers": [],
  "lessonId": 4,
  "codeDef": "module 0x123::sui_fren {\r\n    use sui::object::{Self, UID};\r\n\r\n    struct AdminCap {\r\n        num_frens: u64,\r\n    }\r\n}\r\n",
  "title": "Sui Objects",
  "quizTitle": "In the previous lesson, we defined the AdminCap struct but it's not yet a valid Object type. Let's:\n1. Update AdminCap to have the key ability and an id field of type UID.\n2. Add a new private function - fun init that takes an argument ctx of type &mut TxContext and creates the AdminCap object with num_frens set to 1000. An init function is automatically called when the module is deployed to the blockchain.\n3. Share the AdminCap object so anyone can use to create Frens. We'll cover later how to make it so that only specific accounts can have AdminCap and create Frens.\n",
  "content": [
    "A fundamental concept in Sui we first need to explore is objects. In Sui, all data is represented as fields inside distinct objects. This models real life where everything around us is an object - chair, table, light, etc. People go through life interacting with objects, looking at them to understand their characteristics, interacting with them and modifying their states.\n",
    "\nOn the Sui blockchain, modules create, read, interact with, and modify objects as part of their flows. As users send transactions to call different functions on the blockchain, the functions they call might need to read data from multiple objects that the users own, and modify them to reflect the results of the user interactions. Object is a core fundamental building block in Sui Move and the core of any application. When building one, the first thing developers should think about is what the application data looks like and which objects need to be created to store them.\n",
    "\nFor example, as part of a ticketing application, users might call into a module that first gives you a ticket and allow you to check if it has expired:\n",
    "```\n",
    "module 0x123::ticket_module {\n   use sui::clock::{Self, Clock};\n   use sui::object::{Self, UID};\n   use sui::transfer;\n   use sui::tx_context::TxContext;\n \n   struct Ticket has key {\n      id: UID,\n      expiration_time: u64,\n   }\n \n   public fun create_ticket(ctx: &mut TxContext, clock: &Clock) {\n       let ticket = Ticket {\n           id: object::new(ctx),\n           expiration_time: clock::timestamp_ms(clock),\n       };\n       transfer::share_object(ticket);\n   }\n}\n",
    "```\n",
    "The steps are:\n",
    "\n1. Define the object (we use struct to represent the object). In this case, we define the Ticket object. This object must have the key ability and an id field of type object::UID (see the import statement at the top of the module).\n",
    "2. Call object::new with the default &mut TxContext argument passed to all functions when invoked via a transaction. &mut TxContext is required to create a new object to call object::new, which returns the object's unique id which can be assigned to the id field of the object (Ticket in this case).\n",
    "3. Call transfer::share_object to make the object shared. This is useful when the data in the object is used for multiple users (global data) and doesn’t belong to any specific user. In this case, technically a ticket is not meant to be shared but we'll make it shared for demonstration purposes. Owned objects are objects owned by a specific user and can only be read or modified with that user’s permission (via signing a transaction). We’ll cover shared and owned object more in subsequent lessons.\n"
  ]
}
