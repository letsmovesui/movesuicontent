{
  "codeSol": "module 0x123::sui_fren {\r\n    use sui::object::{Self, UID};\r\n    use sui::transfer;\r\n    use sui::tx_context::{Self, TxContext};\r\n    use std::string::String;\r\n    use std::vector;\r\n    \r\n    struct AdminCap has key {\r\n        id: UID,\r\n        num_frens: u64,\r\n    }\r\n    \r\n    struct SuiFren has key {\r\n        id: UID,\r\n        generation: u64,\r\n        birthdate: u64,\r\n        attributes: vector<String>,\r\n    }\r\n\r\n    public fun mint(generation: u64, birthdate: u64, attributes: vector<String>, ctx: &mut TxContext) {\r\n        let sui_fren = SuiFren {\r\n            id: object::new(ctx),\r\n            generation,\r\n            birthdate,\r\n            attributes,\r\n        };\r\n        transfer::transfer(sui_fren, tx_context::sender(ctx));\r\n    }\r\n}\r\n",
  "quizType": "CODING",
  "answers": [],
  "lessonId": 11,
  "codeDef": "module 0x123::sui_fren {\r\n    use sui::object::{Self, UID};\r\n    use sui::transfer;\r\n    use sui::tx_context::TxContext;\r\n    use std::string::String;\r\n    use std::vector;\r\n    \r\n    struct AdminCap has key {\r\n        id: UID,\r\n        num_frens: u64,\r\n    }\r\n    \r\n    struct SuiFren has key {\r\n        id: UID,\r\n        generation: u64,\r\n        birthdate: u64,\r\n        attributes: vector<String>,\r\n    }\r\n\r\n    public fun mint(generation: u64, birthdate: u64, attributes: vector<String>, ctx: &mut TxContext): SuiFren {\r\n        SuiFren {\r\n            id: object::new(ctx),\r\n            generation,\r\n            birthdate,\r\n            attributes,\r\n        }\r\n    }\r\n}\r\n",
  "title": "Owned Objects",
  "quizTitle": "Update mint to send the newly created `SuiFren` to the transaction sender instead of returning it.",
  "content": "In the previous lessons, we learned how to create, read, and modify the `SuiFren` object which is shared among all users.\n\nThere are two types of Objects:\n1. `Shared Objects` can be read and modified by any users. We previous made `AdminCap` a shared object, which would allow any users to create Sui Frens. This might not be the desired behavior.\n2. `Owned Objects` are private objects that only users who own them can read and modify. Ownership is automatically verified as part of executing the transactions on Sui. Note that only direct ownership is allowed, so if user A owns object B and object B owns object C, user A cannot send a transaction that includes object C. There is a workaround for this using `Receiving<T>` but we'll cover this later.\n\nLetâ€™s modify our `Ticket` example in previous lessons to create true tickets that are given to individual users instead of being accessible by all:\n```\nmodule 0x123::ticket_module {\n  use sui::clock::{Self, Clock};\n  use sui::object::{Self, UID};\n  use sui::transfer;\n  use sui::tx_context::{Self, TxContext};\n \n  struct Ticket has key {\n      id: UID,\n      expiration_time: u64,\n  }\n \n  public fun create_ticket(ctx: &mut TxContext, clock: &Clock) {\n        let ticket = Ticket {\n             id: object::new(ctx),\n             expiration_time: clock::timestamp_ms(clock),\n        };\n        // tx_context::sender(ctx) returns the address of the user who sends this transaction.\n        transfer::transfer(ticket, tx_context::sender(ctx));\n  }\n \n  public fun is_expired(ticket: &Ticket, clock: &Clock): bool {\n     ticket.expiration_time >= clock::timestamp_ms(clock)\n  }\n}\n```\nIn order to make `Ticket` objects owned, we just need to explicitly transfer the object to an address instead of calling `transfer::share` like before. Here, we transfer newly created tickets to the user who sends the transaction that calls `create_ticket`. To get the user's address, we use `tx_context::sender(ctx)`."
}
