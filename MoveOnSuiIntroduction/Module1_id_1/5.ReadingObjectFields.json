{
  "codeSol": "module 0x123::sui_fren {\r\n    use sui::object::{Self, UID};\r\n    use sui::transfer;\r\n    use sui::tx_context::TxContext;\r\n\r\n\r\n    struct AdminCap has key {\r\n        id: UID,\r\n        num_frens: u64,\r\n    }\r\n    \r\n    fun init(ctx: &mut TxContext) {\r\n        let admin_cap = AdminCap {\r\n            id: object::new(ctx),\r\n            num_frens: 1000,\r\n        };\r\n        transfer::share_object(admin_cap);\r\n    }\r\n\r\n\r\n    // Add function get_num_frens here\r\n    fun get_num_frens(admin_cap: &AdminCap): u64 {\r\n        admin_cap.num_frens\r\n    }\r\n}\r\n",
  "quizType": "CODING",
  "answers": [],
  "lessonId": 5,
  "codeDef": "module 0x123::sui_fren {\r\n    use sui::object::{Self, UID};\r\n    use sui::transfer;\r\n    use sui::tx_context::TxContext;\r\n\r\n\r\n    struct AdminCap has key {\r\n        id: UID,\r\n        num_frens: u64,\r\n    }\r\n    \r\n    fun init(ctx: &mut TxContext) {\r\n        let admin_cap = AdminCap {\r\n            id: object::new(ctx),\r\n            num_frens: 1000,\r\n        };\r\n        transfer::share_object(admin_cap);\r\n    }\r\n\r\n\r\n    // Add function get_num_frens here\r\n}\r\n",
  "title": "Reading Object fields",
  "quizTitle": "Add a new function `get_num_frens` that takes an argument `admin_cap` of type `&AdminCap` object and returns the `num_frens` value.",
  "content": [
    "Previously, we wrote a simple ticket application that creates tickets that have an expiration time. Let's introduce a separate function that reads this `expiration_time` field and checks if a ticket has expired:\n",
    "```\n",
    "module 0x123::ticket_module {\n  use sui::clock::{Self, Clock};\n  use sui::object::{Self, UID};\n  use sui::transfer;\n  use sui::tx_context::TxContext;\n \n  struct Ticket has key {\n      id: UID,\n      expiration_time: u64,\n  }\n \n  public fun is_expired(ticket: &Ticket, clock: &Clock): bool {\n     ticket.expiration_time >= clock::timestamp_ms(clock)\n  }\n}\n",
    "```\n",
    "To read the data of a `Ticket` object, the `is_expired` function above takes an immutable reference to the `Ticket` object. Move distinguishes between references and object values. When we only need to read the state of existing tickets in is_expired, we use a reference and should not be recreating or copying the entire ticket. This is similar to an electronic ticket where you can have multiple copies on your phone and laptop, but they all point to the same ticket. Immutable references just mean you can’t update the associated structs’ fields and can be represented with type `&StructName`. Note that `is_expired` also takes a `Clock` object reference (`&Clock`). This is another automatic argument, similar to `TxContext` that is passed by the system. We'll cover this more later.\n"
  ]
}
