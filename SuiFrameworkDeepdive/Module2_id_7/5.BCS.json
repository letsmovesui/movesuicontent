{
  "codeSol": "public fun deserialize(bytes: vector<u8>): Info {\n    use sui::bcs::{Self, BCS};\n\n    let prepared: BCS = bcs::new(bytes);\n    let (a, b, c, d, k, s) = (\n        bcs::peel_bool(&mut prepared),\n        bcs::peel_u8(&mut prepared),\n        bcs::peel_u64(&mut prepared),\n        bcs::peel_u128(&mut prepared),\n        bcs::peel_vec_bool(&mut prepared),\n        bcs::peel_address(&mut prepared)\n    );\n\n    Info { a, b, c, d, k, s }\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "5",
  "codeDef": "public fun deserialize(bytes: vector<u8>): Info {\n    // your code here\n}",
  "title": "BCS",
  "quizTitle": "Exercise: Write a function that can extract the values to reconstruct a given struct from BCS bytes:\n```\nstruct Info {\n    a: bool,\n    b: u8,\n    c: u64,\n    d: u128,\n    k: vector<bool>,\n    s: address\n}\n```\n\nThe function should take a vector of bytes and return the struct.",
  "content": "Not to be confused with the bcs module from std::bcs, this lesson covers the sui::bcs module, which has a lot more functionalities.\nBCS is the default serialization format for Sui and Move. It is a binary format that is used to serialize data for storage and transmission. The BCS format is used to serialize data for storage and transmission.\nWhen values are passed as arguments in a transaction, they're serialized into BCS format. When the transaction is executed, the values are deserialized from BCS format into actual values in Move. This serialization and deserialization come with a cost for the Sui blockchain that developers should be mindful of.\nBy default, transactions cannot take non-object structs as arguments with the exception of Strings.\n\nThe BCS module can provide a workaround for this allowing developers to pass a struct-like values as a series of BCS-encoded bytes and the Move code can extract the values one by one as long as they're all of primitive types or vectors or options. This allows the FE to serialize a struct (which just generates a sequence of values, one after another) and the sequence of values can be extracted from the bytes one at a time:\n\n```\n/// This function reads u8 and u64 value from the input\nuse sui::bcs;\n\npublic fun deserialize(bytes: vector<u8>): (u8, u64) {\n    let prepared = bcs::new(bytes);\n    let (u8_value, u64_value) = (\n        bcs::peel_u8(&mut prepared),\n        bcs::peel_u64(&mut prepared)\n    );\n\n    (u8_value, u64_value)\n}\n```\n\nVectors can be extracted (or \"peeled\") similarly:\n```\npublic fun deserialize(bytes: vector<u8>): vector<u8> {\n    let prepared = bcs::new(bytes);\n    let u8_vector = bcs::peel_vec_u8(&mut prepared);\n    let u64_vector = bcs::peel_vec_u64(&mut prepared);\n\n    u8_vector\n}\n```\n\nOptions:\n```\npublic fun deserialize(bytes: vector<u8>): Option<u8> {\n    let prepared = bcs::new(bytes);\n    let u8_option = bcs::peel_option_u8(&mut prepared);\n    let u64_option = bcs::peel_option_u64(&mut prepared);\n\n    u8_option\n}\n```"
}
