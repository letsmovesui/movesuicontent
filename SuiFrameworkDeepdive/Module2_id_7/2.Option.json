{
  "codeSol": "",
  "quizType": "ANSWERS",
  "answers": [
    {
      "answer": "A. Optional arguments to a function",
      "isCorrect": false
    },
    {
      "answer": "B. Optional fields in a struct",
      "isCorrect": false
    },
    {
      "answer": "C. Optional type arguments for a function",
      "isCorrect": true
    }
  ],
  "lessonId": "2",
  "codeDef": "",
  "title": "Option",
  "quizTitle": "What should Option not be used for?",
  "content": [
    "The Option type is a common pattern in Rust and other languages. It is used to represent a value that may or may not be present. In Move, the Option type is implemented using a vector of size zero or one element.\n",
    "Options are useful for:\n",
    "1. Optional arguments that are passed to functions\n",
    "2. Optional fields in structs\n",
    "3. Optional return values from functions\n",
    "\n",
    "The Option type is defined in the std::option module. The Option type is a generic type, meaning it can hold any type of value. The Option type has two variants: Some and None. The Some variant holds a value, while the None variant does not hold a value.\n",
    "An optional value can be created with:\n",
    "```\nlet absent = option::none();\nlet some_value = option::some(42);\n```\n",
    "Options can be used on both primitive and structs:\n",
    "```\nstruct MyStruct {\n    value: u64\n}\nlet some_struct = option::some(MyStruct{value: 42});\nlet value = option::borrow(&some_struct).value;\n```\n",
    "\n",
    "The Option type has several methods to work with optional values:\n",
    "\n",
    "is_none: returns true if the Option is None\n",
    "```\nlet absent = option::none();\nassert!(option::is_none(&absent), 0);\n```\n",
    "\n",
    "is_some: returns true if the Option is Some\n",
    "```\nlet some_value = option::some(42);\nassert!(option::is_some(&some_value), 0);\n```\n",
    "\n",
    "contains: returns true if the Option contains a specific value\n",
    "```\nlet some_value = option::some(42);\nassert!(option::contains(&some_value, &42), 0);\n```\n",
    "\n",
    "A value can be read from an Option. This will abort if the Option is None:\n",
    "```\nlet some_value = option::some(42);\nlet value = option::borrow(&some_value);\n```\n",
    "\n",
    "A value can be read from an Option with a default value if the Option is None:\n",
    "```\nlet absent = option::none();\nlet value = option::borrow_with_default(&absent, &42);\n```\n",
    "\n",
    "A mutable reference to the value can be obtained from the Option and used to modify the value:\n",
    "```\nlet some_value = option::some(42);\nlet value = option::borrow_mut(&some_value);\n*value = 43;\n```\n",
    "\n",
    "The value inside an Option can be replaced with a new value:\n",
    "```\nlet some_value = option::some(42);\nlet old_value = option::swap(&some_value, 43);\n```\n",
    "\n",
    "Values can also be filled in or extracted from an Option:\n",
    "```\nlet absent = option::none();\noption::fill(&absent, 42);\nlet value = option::extract(&absent);\n```\n",
    "\n",
    "The Option type can be destroyed and its value extracted:\n",
    "```\nlet some_value = option::some(42);\nlet value = option::destroy_some(some_value);\n```"
  ]
}
