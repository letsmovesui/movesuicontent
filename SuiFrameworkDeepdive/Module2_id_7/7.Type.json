{
  "codeSol": "public fun withdraw<CoinType>(coin: CoinType) {\n    let type_name = std::type_name::get<CoinType>();\n    if (type_name == string::utf8(\"0x123::my_module::Coin1\")) {\n        // Withdraw Coin1\n    } else if (type_name == string::utf8(\"0x123::my_module::Coin2\")) {\n        // Withdraw Coin2\n    } else if (type_name == string::utf8(\"0x123::my_module::Coin3\")) {\n        // Withdraw Coin3\n    } else {\n        // Unknown coin type\n    }\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "7",
  "codeDef": "public fun withdraw<CoinType>(coin: CoinType) {\n    // Implement\n}",
  "title": "Type name",
  "quizTitle": "Exercise: Given the following 3 coin types and assuming they're deployed at a module located at 0x123, write a function that withdraw these different coins from the user's account:\n```\nmodule 0x123::my_module {\n    struct Coin1 {}\n    struct Coin2 {}\n    struct Coin3 {}\n}\n```\nYou don't need to write the withdraw logic. Just leave a comment in each case similar to // Withdraw Coin1",
  "content": "Types in Move, defined as structs, contain 3 components:\n- Module address: the address of the module that defined the type\n- Module name: the name of the module that defined the type\n- Type name: the name of the struct\n\nTypes in Move are also passed as type arguments between functions. In some cases, developers might want to inspect the types in order to apply different logic.\nThis is where type_name module comes in. It provides a way to convert Move types into values. This is useful for debugging, logging, and other use cases where the type of a value needs to be inspected at runtime.\n```\n// Example usage\npublic fun process<T>(val: T) {\n    let type_name = type_name::get<T>();\n    let type_name_str = type_name::into_string(type_name);\n    if (type_name_str == utf8(b\"0xdeadbeef::my_module::MyStruct\")) {\n        // do something\n    } else if (type_name_str == \"0xdeadbeef::my_module::MyOtherStruct\") {\n        // do something else\n    } else {\n        abort 0;\n    }\n}\n```\n\nThe different components can be extracted from a type as well:\n```\nlet type_name = type_name::get<T>();\nlet module_name = type_name::get_module(&type_name);\nlet address = type_name::get_address(&type_name);\n```\n\nType name should be used with caution as comparing type names is not a reliable way to determine the type of a value. It is recommended to use Move's type system to determine the type of a value whenever possible."
}
