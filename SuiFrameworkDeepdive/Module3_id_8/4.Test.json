{
  "codeSol": "",
  "quizType": "ANSWERS",
  "answers": [
    {
      "answer": "A. Because test_scenario is required for all tests",
      "isCorrect": false
    },
    {
      "answer": "B. To set up all aspects of the system before tests run",
      "isCorrect": true
    },
    {
      "answer": "C. Because test_scenario makes tests run faster",
      "isCorrect": false
    }
  ],
  "lessonId": "4",
  "codeDef": "",
  "title": "Test scenario: Managing transactions",
  "quizTitle": "Why is test_scenario needed",
  "content": [
    "If you recall objects, &mut TxContext and the tx_context module, you might ask how are these set up in tests. The answer is by default they aren't. This might lead to baffling failures when writing your tests as these tx_context is often used to create objects or determine the sender of the transaction.\n",
    "Move unit tests are run only with the Sui Move VM and does not include any other components of the blockchain. In order to make sure the tx context as well as other parts of the Sui system are functional, developers can use test_scenario:\n",
    "\n",
    "```\n",
    "use sui::test_scenario::{Self, Scenario};\n",
    "\n",
    "#[test]\n",
    "public fun my_test() {\n",
    "    let scenario_val = test_scenario::begin(@0x123);\n",
    "    let scenario = &mut scenario_val;\n",
    "\n",
    "    test_scenario::next_tx(scenario, @0x123);\n",
    "    // your test code here\n",
    "\n",
    "    test_scenario::end(scenario_val);\n",
    "}\n",
    "```\n",
    "\n",
    "There are 3 functions to call from test_scenario throughout your test:\n",
    "- test_scenario::begin: This function initializes the test scenario and returns a Scenario object. This object is used to keep track of the state of the test scenario.\n",
    "- test_scenario::next_tx: This function is used to simulate a transaction. It takes a Scenario object and a sender address as arguments. This function is used to simulate a transaction from a specific sender.\n",
    "- test_scenario::end: This function is used to end the test scenario. It takes a Scenario object as an argument and cleans up the test scenario.\n",
    "\n",
    "With these functions, everything your test needs should already be set up. In some cases, developers might go as far as making the transaction boundary of each block of test code explicit with blocks ({ ... }):\n",
    "```\n",
    "\n",
    "#[test]\n",
    "fun my_test {\n",
    "    // === Third transaction ===\n",
    "    // next transaction - Fran looks in her inventory and finds the book\n",
    "    // she decides to return it to Manny and buy another one herself\n",
    "    test_scenario::next_tx(&mut scenario, fran);\n",
    "    {\n",
    "        // objects can be taken from the sender by ID (if there's multiple)\n",
    "        // or if there's only one object: `take_from_sender<T>(&scenario)`\n",
    "        let book = test_scenario::take_from_sender_by_id<LittleBookOfCalm>(&scenario, book_id);\n",
    "        // send the book back to Manny\n",
    "        sui::transfer::transfer(book, manny);\n",
    "\n",
    "        // now repeat the same steps as before\n",
    "        let store = test_scenario::take_shared<BlackBooks>(&scenario);\n",
    "        let ctx = test_scenario::ctx(&mut scenario);\n",
    "        let coin = coin::mint_for_testing<SUI>(5_000_000_000, ctx);\n",
    "\n",
    "        // same as before - purchase the book\n",
    "        let book = purchase(&mut store, coin, ctx);\n",
    "        sui::transfer::transfer(book, fran);\n",
    "\n",
    "        // don't forget to return\n",
    "        test_scenario::return_shared(store);\n",
    "    };\n",
    "\n",
    "    // === Fourth transaction ===\n",
    "    // last transaction - Bernard collects the proceeds and transfers the store to Fran\n",
    "    test_scenario::next_tx(&mut scenario, bernard);\n",
    "    {\n",
    "        let store = test_scenario::take_shared<BlackBooks>(&scenario);\n",
    "        let cap = test_scenario::take_from_sender<StoreOwnerCap>(&scenario);\n",
    "        let ctx = test_scenario::ctx(&mut scenario);\n",
    "        let coin = collect(&mut store, &cap, ctx);\n",
    "\n",
    "        sui::transfer::public_transfer(coin, bernard);\n",
    "        sui::transfer::transfer(cap, fran);\n",
    "        test_scenario::return_shared(store);\n",
    "    };\n",
    "}\n",
    "```\n"
  ]
}
