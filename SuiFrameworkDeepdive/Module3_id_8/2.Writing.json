{
  "codeSol": "#[test_only]\nmodule my_package::math_tests {\n    use my_package::math;\n\n    #[test]\n    fun test_add() {\n        assert!(math::add(1, 2) == 3, 0);\n    }\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "2",
  "codeDef": "",
  "title": "Writing tests",
  "quizTitle": "Exercise: given the following module:\n\n```\nmodule my_package::math {\n    public fun add(x: u64, y: u64): u64 {\n        x + y\n    }\n}\n```\n\nWrite a test module with a single test that verifies that add works correctly with one assertion that 1 + 2 is 3.",
  "content": "A test module consists of helper functions and test functions. A test module can look like below:\n```\n#[test_only]\nmodule my_package::my_module_tests {\n    use std::string::{String, utf8};\n    use std::vector;\n\n    use my_package::my_module;\n\n    #[test]\n    fun my_test1() {\n        setup();\n        let my_struct = my_module::new_struct();\n        assert!(my_module.do_something(my_struct) == 0, 0);\n    }\n\n    #[test]\n    fun my_test2() {\n        setup();\n        let my_struct = MyStruct::new();\n        assert!(my_module.do_something(my_struct) == 0, 0);\n    }\n\n    fun setup() {\n        // setup code\n    }\n}\n```\nIn the example above, we have a helper setup function that is called at the start of each test. Note that Move doesn't have automatic setup functions so tests would need to do this manually.\nEach test is accompanied by a #[test] annotation so they will be run when developers execute a test run\n```\nsui move test\n```\nin the tests direction. Developers can additionally run `sui move test --coverage` to get a coverage report - how many % of the code is covered by the tests.\n\nTests can use assertion! statements to check the expected behavior of the code under test. assert! takes 2 arguments:\n- the first is a boolean expression that should evaluate to true if the test passes\n- the second is error message to help indicate which assertion failed in case there are many assertions in the test\n\nThere can be as many tests in the same module. The test module can also import any other modules. Note that everything written in the test module is not deployed to the blockchain so developers don't need to worry about security issues here/\nHelper functions can also be created in a separate test module that has no actual tests:\n```\n#[test_only]\nmodule my_package::test_helper {\n    public fun setup() {\n        // setup code\n    }\n}\n```"
}
