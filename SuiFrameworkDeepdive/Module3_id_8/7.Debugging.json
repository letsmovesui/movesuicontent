{
  "codeSol": "",
  "quizType": "ANSWERS",
  "answers": [
    {
      "answer": "A. Take b\"Hello\" and print it out as a string",
      "isCorrect": true
    },
    {
      "answer": "B. Print numbers - u8, u32, u64, etc.",
      "isCorrect": false
    },
    {
      "answer": "C. Print bools",
      "isCorrect": false
    }
  ],
  "lessonId": "7",
  "codeDef": "",
  "title": "Debugging",
  "quizTitle": "What can't std::debug::print do?",
  "content": [
    "In unit tests, developers might need to know how to debug when the test fails. This can help with unexpected failures that are hard to debug.\n",
    "To do this, normally developers want to print out different values at different places in the test to give them a better understanding of what is happening.\n",
    "You can also do this in Move:\n",
    "\n",
    "```\n",
    "#[test]\n",
    "fun test_my_function() {\n",
    "    let a = 1;\n",
    "    let b = 2;\n",
    "    std::debug::print(&a);\n",
    "    std::debug::print(&b);\n",
    "    assert(a == b, 101);\n",
    "}\n",
    "```\n",
    "std::debug::print takes references to any values and prints them out. Note that to print a string literal, you need to do the following:\n",
    "```\n",
    "std::debug::print(&std::ascii::string(b\"Hello, world!\"));\n",
    "```\n",
    "\n",
    "std::debug::print can also print an entire struct:\n",
    "```\n",
    "struct MyStruct {\n",
    "    a: u64,\n",
    "    b: u64,\n",
    "}\n",
    "\n",
    "#[test]\n",
    "fun test_my_function() {\n",
    "    let my_struct = MyStruct { a: 1, b: 2 };\n",
    "    std::debug::print(&my_struct);\n",
    "}\n",
    "```\n"
  ]
}
