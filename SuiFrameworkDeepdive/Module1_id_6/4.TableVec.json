{
  "codeSol": "",
  "quizType": "ANSWERS",
  "answers": [
    {
      "answer": "A. TableVec can be created with literal with vector cannot",
      "isCorrect": false
    },
    {
      "answer": "B. TableVec scales better than vector with large amount of items",
      "isCorrect": true
    },
    {
      "answer": "C. vector is fixed-sized while TableVec is not",
      "isCorrect": false
    }
  ],
  "lessonId": "4",
  "codeDef": "",
  "title": "Table vec (Large vectors)",
  "quizTitle": "What's the difference between `vector` and `TableVec`?",
  "content": "The standard vector is not efficient when there's a large number of items to be added (more than a few tens). This is because the bigger the vector is, the more gas it would be to update it such as adding a new element as this leads to more I/O cost to execute such transactions.\nGenerally, developers should use table-based vectors (`TableVec`) to store a large number of items. `TableVec` is a scalable vector that is implemented using the `Table` module. It is efficient for adding, removing, and accessing elements.\nTo create a `TableVec`:\n```\nlet t = table_vec::empty::<u64>(ctx);\n```\nNote that TableVec can only be used to store values that have the store ability. This includes all primitive types and structs that have the store ability.\n\nTo add an element to the end of the TableVec:\n```\ntable_vec::push_back(&mut t, 10);\n```\n\nTo get the length of the TableVec:\n```\nlet len = table_vec::length(&t);\n```\n\nTo get the element at a particular index:\n```\nlet element = table_vec::borrow(&t, 0);\n```\n\nTo remove the last element from the `TableVec`:\n```\nlet last_element = table_vec::pop_back(&mut t);\n```\n\nTo remove an element at a particular index:\n```\nlet element = table_vec::swap_remove(&mut t, 0);\n```\n\nSimilar to Table and LinkedTable, TableVec cannot be dropped automatically and has to be destroyed explicitly:\n1. If the `TableVec` is empty, it can be destroyed using `table_vec::destroy_empty(t)`.\n2. If the `TableVec` is non-empty, it can be dropped using `table_vec::drop(t)`. Take caution when using this function as it can take a lot of gas to execute if the `TableVec` is large.\n\nTo modify an element at a particular index:\n```\nlet mut element = table_vec::borrow_mut(&mut t, 0);\n*element = 20;\n```"
}
