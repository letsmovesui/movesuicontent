{
  "codeSol": "",
  "quizType": "ANSWERS",
  "answers": [
    {
      "answer": "A. Table should be used to store many items while VecMap is good for a small number",
      "isCorrect": true
    },
    {
      "answer": "B. Table cannot be dropped automatically while VecMap can",
      "isCorrect": false
    },
    {
      "answer": "C. VecMap is fix-sized",
      "isCorrect": false
    }
  ],
  "lessonId": "7",
  "codeDef": "",
  "title": "Vector-based map",
  "quizTitle": "What's the difference between VecMap and Table?",
  "content": "VecMap a simple map data structure backed by a vector. The map is guaranteed not to contain duplicate keys, but entries are *not* sorted by key--entries are included in insertion order.\nSimilar to vectors, VecMap should not be used when there's a large number of elements as this can lead to higher gas cost for access and updates. Tables should be used when there's a large number of elements.\n\nVecMap allows access either by key or by index (based on insertion order).\nTo create a new VecMap:\n```\nlet map = vec_map::empty<u64, u64>();\n```\n\nTo insert a new key-value pair:\n```\nvec_map::insert(&mut map, 1, 2);\n```\n\nTo remove a key-value pair:\n```\nvec_map::remove(&mut map, &1);\n```\n\nTo access element by key:\n```\nlet value = vec_map::get(&map, &1);\n```\nIn case you're not sure if the key exists and don't want to get an error which would abort the entire transaction, you can use `try_get`:\n```\nlet value_opt = vec_map::try_get(&map, &1);\nif (option::is_some(&value_opt)) {\n    let value = option::unwrap(value_opt);\n}\n```\n\nTo access element by index:\n```\nlet (key, value) = vec_map::get_entry_by_idx(&map, 0);\n```\n\nTo modify an element by key:\n```\n*vec_map::get_mut(&mut map, &1) = 3;\n```\n\nTo modify an element by index:\n```\n*vec_map::get_entry_by_idx_mut(&mut map, 0).1 = 3;\n```\n\nTo unpack the map into vectors of its keys and values:\n```\nlet (keys, values) = vec_map::into_keys_values(map);\n```\n\nVecMap cannot be automatically dropped. All elements must be explicitly removed first before the VecMap can be destroyed:\n```\nvec_map::destroy_empty(map);\n```\n\nOther useful functions include:\n- `size` to get the number of elements in the map\n- `is_empty` to check if the map is empty\n- `keys` to get a list of keys in the map"
}
