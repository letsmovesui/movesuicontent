{
  "codeSol": "public fun remove_duplicates(v: &mut vector<u64>) {\n    let i = 0;\n    while (i < vector::length(v)) {\n        if (borrow(v, i) == borrow(v, i + 1)) {\n            remove(v, i);\n        } else {\n            i = i + 1;\n        }\n    }\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "1",
  "codeDef": "public fun remove_duplicates(v: &mut vector<u64>) {\n    // Write the code here\n}",
  "title": "Vectors",
  "quizTitle": "Remove duplicates from a sorted `vector` using while loop\n",
  "content": "*Vector* in Move is a dynamic array that can grow and shrink in size. It is a generic type, meaning it can hold any type of data, from primitive types to complex structs. It is similar to the `Vec` type in Rust or `ArrayList` in Java.\nThe `vector` module in Move has several native functions that allow you to create, access, and manipulate vectors. The native functions are directly written in Rust and invoked through the Sui Move VM and thus are faster and more efficient than writing the same functions in Move.\nIn order to create a vector, there are two ways:\n1. Use a `vector` literal:\n```\nlet v = vector[1, 2, 3, 4];\n```\n2. Use the empty function:\n```\nlet v = vector::empty<u64>();\n```\nNote that the type hint `<u64>` might not be required if elements are added to this vector in the same function.\n```\nlet v = vector::empty();\nvector::push_back(&mut v, 1);\n```\n\nTo read a value from a vector, use the borrow function:\n```\nlet v = vector[1, 2, 3, 4];\nlet x = vector::borrow(&v, 2);\n```\nNote that x is a reference type which means it cannot be modified. If the values in the vector are copiable (have the copy ability), you can make a copy by dereferencing:\n```\nlet v = vector[1, 2, 3, 4];\nlet x = *vector::borrow(&v, 2);\n```\n\nTo modify a value of a vector in-place, use the borrow_mut function:\n```\nlet v = vector[1, 2, 3, 4];\nlet x = vector::borrow_mut(&mut v, 2);\n*x = *x + 1;\n```\n\nTo remove the last element from a vector, use the pop_back function:\n```\nlet v = vector[1, 2, 3, 4];\nlet x = vector::pop_back(&mut v);\n```\n\nYou can also remove a specific occurrence of an element from a vector by using `index_of` and `swap_remove` functions:\n```\nlet v = vector[1, 2, 3, 4];\nlet (found, i) = vector::index_of(&v, 3);\nif (found) {\n    vector::swap_remove(&mut v, i);\n}\n```\n\n`Arrays` can be combined and reversed:\n```\nlet v1 = vector[1, 2, 3];\nlet v2 = vector[4, 5, 6];\nvector::append(&mut v1, v2);\nvector::reverse(&mut v1);\n```"
}
