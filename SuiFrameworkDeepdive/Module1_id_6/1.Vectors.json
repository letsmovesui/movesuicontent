{
  "codeSol": "public fun remove_duplicates(v: &mut vector<u64>) {\n    let i = 0;\n    while (i < vector::length(v)) {\n        if (borrow(v, i) == borrow(v, i + 1)) {\n            remove(v, i);\n        } else {\n            i = i + 1;\n        }\n    }\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "1",
  "codeDef": "public fun remove_duplicates(v: &mut vector<u64>) {\n    // Write the code here\n}",
  "title": "Vectors",
  "quizTitle": "Remove duplicates from a sorted `vector` using while loop\n",
  "content": [
    "*Vector* in Move is a dynamic array that can grow and shrink in size. It is a generic type, meaning it can hold any type of data, from primitive types to complex structs. It is similar to the `Vec` type in Rust or `ArrayList` in Java.\n",
    "The `vector` module in Move has several native functions that allow you to create, access, and manipulate vectors. The native functions are directly written in Rust and invoked through the Sui Move VM and thus are faster and more efficient than writing the same functions in Move.\n",
    "In order to create a vector, there are two ways:\n",
    "1. Use a `vector` literal:\n",
    "```\n",
    "let v = vector[1, 2, 3, 4];\n",
    "```\n",
    "2. Use the empty function:\n",
    "```\n",
    "let v = vector::empty<u64>();\n",
    "```\n",
    "Note that the type hint `<u64>` might not be required if elements are added to this vector in the same function.\n",
    "```\n",
    "let v = vector::empty();\n",
    "vector::push_back(&mut v, 1);\n",
    "```\n",
    "\n",
    "To read a value from a vector, use the borrow function:\n",
    "```\n",
    "let v = vector[1, 2, 3, 4];\n",
    "let x = vector::borrow(&v, 2);\n",
    "```\n",
    "Note that x is a reference type which means it cannot be modified. If the values in the vector are copiable (have the copy ability), you can make a copy by dereferencing:\n",
    "```\n",
    "let v = vector[1, 2, 3, 4];\n",
    "let x = *vector::borrow(&v, 2);\n",
    "```\n",
    "\n",
    "To modify a value of a vector in-place, use the borrow_mut function:\n",
    "```\n",
    "let v = vector[1, 2, 3, 4];\n",
    "let x = vector::borrow_mut(&mut v, 2);\n",
    "*x = *x + 1;\n",
    "```\n",
    "\n",
    "To remove the last element from a vector, use the pop_back function:\n",
    "```\n",
    "let v = vector[1, 2, 3, 4];\n",
    "let x = vector::pop_back(&mut v);\n",
    "```\n",
    "\n",
    "You can also remove a specific occurrence of an element from a vector by using `index_of` and `swap_remove` functions:\n",
    "```\n",
    "let v = vector[1, 2, 3, 4];\n",
    "let (found, i) = vector::index_of(&v, 3);\n",
    "if (found) {\n",
    "    vector::swap_remove(&mut v, i);\n",
    "}\n",
    "```\n",
    "\n",
    "`Arrays` can be combined and reversed:\n",
    "```\n",
    "let v1 = vector[1, 2, 3];\n",
    "let v2 = vector[4, 5, 6];\n",
    "vector::append(&mut v1, v2);\n",
    "vector::reverse(&mut v1);\n",
    "```\n"
  ]
}
