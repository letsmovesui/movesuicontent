{
  "codeSol": "public fun remove_duplicates<K: copy + drop + store, V: store>(table: &mut LinkedTable<K, V>) {\n    let mut current = *option::borrow(&table.head);\n    while (option::is_some(&linked_table::next(table, current))) {\n        let next = *option::borrow(&linked_table::next(table, current));\n        if (linked_table::borrow(table, current) == linked_table::borrow(table, next)) {\n            linked_table::remove(table, next);\n        } else {\n            current = next;\n        }\n    }\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "3",
  "codeDef": "public fun remove_duplicates<K: copy + drop + store, V: store>(table: &mut LinkedTable<K, V>) {\n    // Your code here\n}",
  "title": "Linked Table (LinkedList)",
  "quizTitle": "Exercise: Implement a function to remove duplicates from a linked table where all elements are already sorted.",
  "content": [
    "Linked list is a data structure that consists of a sequence of elements where each element points to the next element.\n",
    "Linked lists are useful data structures to implement more sophisticated protocols such as Order book and offer the following benefits:\n",
    "- Dynamic size: Linked lists are dynamic data structures that can grow and shrink as needed.\n",
    "- Insertion and removal are one operation each instead of removing an element from a vector which requires shifting all the elements after it.\n",
    "- Insertion order: Elements are stored in the order they are inserted. This can be very useful for specific programs.\n",
    "\n",
    "Linked lists in Sui Move can be created using Linked Table and offer the following extra benefits:\n",
    "- *Scaling*: `Linked Table` can be used to store a large number of elements as it uses dynamic fields to store the elements.\n",
    "- `LinkedTable` can also be a standalone object or a field in another object.\n",
    "- Iteration outside of loops: `Linked Table` can be iterated using the `prev` and `next` functions to traverse the list.\n",
    "\n",
    "To create a `Linked Table`:\n",
    "```\n",
    "let mut table = linked_table::new::<u64, u64>(ctx);\n",
    "```\n",
    "\n",
    "Type specification <u64, u64> is technically not required if insertion is done immediately after creation:\n",
    "```\n",
    "let mut table = linked_table::new(ctx);\n",
    "linked_table::push_back(&mut table, 1, 10);\n",
    "```\n",
    "\n",
    "To insert a key-value pair at the front of the table:\n",
    "```\n",
    "linked_table::push_front(&mut table, 2, 20);\n",
    "```\n",
    "\n",
    "To insert a key-value pair at the back of the table:\n",
    "```\n",
    "linked_table::push_back(&mut table, 3, 30);\n",
    "```\n",
    "Note that keys added to the linked table must have copy, drop, and store abilities. Values must have store ability.\n",
    "\n",
    "To remove the key-value pair in the table and return the value:\n",
    "```\n",
    "let value = linked_table::remove(&mut table, 2);\n",
    "```\n",
    "\n",
    "Linked Table can be traversed using the `prev` and `next` functions:\n",
    "```\n",
    "let current = linked_table::front(&table);\n",
    "while option::is_some(current) {\n",
    "    let key = option::unwrap(current);\n",
    "    let value = linked_table::borrow(&table, key);\n",
    "    current = linked_table::next(&table, key);\n",
    "}\n",
    "```\n",
    "Current key can be passed to other function to iterate without using a loop (e.g. with recursion).\n",
    "\n",
    "Similar to Table, Linked Table cannot be dropped automatically as it doesn't have the drop ability. It can only be destroyed explicitly in two ways:\n",
    "- `linked_table::destroy_empty(table)` can be used to destroy an empty table.\n",
    "- `linked_table::drop(table)` can be used to drop a possibly non-empty table. Take caution as this can be very expensive gas-wise if the table is large.\n"
  ]
}
