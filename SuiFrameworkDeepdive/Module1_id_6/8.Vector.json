{
  "codeSol": "public fun remove_duplicates(v: vector<u64>): vector<u64> {\n    let set = vec_set::empty();\n    let i = 0;\n    while (i < vector::length(&v)) {\n        let x = vector::get(&v, i);\n        if (!vec_set::contains(&set, &x)) {\n            vec_set::insert(&mut set, x);\n        }\n        i = i + 1;\n    };\n    vec_set::into_keys(set)\n}",
  "quizType": "CODING",
  "answers": [],
  "lessonId": "8",
  "codeDef": "public fun remove_duplicates(v: vector<u64>): vector<u64> {\n    // Implement\n}",
  "title": "Vector-based Set",
  "quizTitle": "Use a VecSet to remove duplicates from a vector",
  "content": "Similar to VecMap, VecSet is a vector-based set data structure. Sets are useful for the following use cases:\n- Deduplicate an input vector of elements\n- Avoid duplicates when inserting elements into a collection\n\nNote that VecSet's insertion and removal are O(n) instead of O(1) like HashSet or O(log n) like tree-based sets. This is because VecSet is backed by a vector, and it needs to scan the entire vector to check for duplicates.\nAnother limitation is that VecSet should not be used to store large numbers of elements, as the gas cost will be high for all operations.\n\nTo create a VecSet:\n```\nlet mut set = vec_set::empty<u64>();\n```\n\nTo insert an element into the set:\n```\nvec_set::insert(&mut set, 1);\n```\nElements inserted into a VecSet must have copy and drop abilities.\n\nTo remove an element from the set:\n```\nvec_set::remove(&mut set, &1);\n```\n\nTo check if an element is in the set:\n```\nvec_set::contains(&set, &1);\n```\n\nTo get the number of elements in the set:\n```\nvec_set::size(&set);\n```\n\nTo check if the set is empty:\n```\nvec_set::is_empty(&set);\n```"
}
